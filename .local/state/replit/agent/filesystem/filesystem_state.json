{"file_contents":{"FINTCS_FRONTEND_PLAN.md":{"content":"# FINTCS Frontend Development Plan\n\n## Project Overview\n**App Name:** FINTCS (Financial Technology Credit Society)\n**Technology Stack:** Angular 20+ with Tailwind CSS\n**Backend API:** ASP.NET Core with JWT Authentication\n**Database:** SQLite with JSON fields for flexible data storage\n\n## Architecture Analysis\n\n### Backend Models Integration\nBased on the provided models, the frontend will handle:\n\n#### 1. User Management (User.cs & DTOs.cs)\n- **User Model:** JWT-based authentication with roles (user/admin)\n- **User Details:** Extended profile information stored as JSON\n- **Fields to implement:**\n  - Username, Email, Phone, Role\n  - EDP Number, Name, Addresses (Office/Residential)\n  - Designation, Phone numbers (Office/Residential/Mobile)\n\n#### 2. Member Management (Member.cs)\n- **Auto-generated Member Numbers:** MEM_001, MEM_002, etc.\n- **Complete Member Profile:** Personal and professional details\n- **Banking Details:** Stored as JSON for flexibility\n- **Approval Workflow:** Pending changes system\n- **Fields to implement:**\n  - Personal: Name, Father's Name, DOB, Addresses\n  - Professional: Designation, Branch, Office details\n  - Contact: Multiple phone numbers, email\n  - Financial: Banking details, nominee information\n  - Membership: DOJ Society, DOJ Organization, DOR\n\n#### 3. Society Management (Society.cs)\n- **Society Configuration:** Basic information and settings\n- **Interest Rates:** Dividend, OD, CD, Loan, Emergency Loan, LAS\n- **Limits:** Share, Loan, Emergency Loan limits\n- **Approval System:** Pending changes for society updates\n\n## Frontend Architecture Plan\n\n### 1. Authentication System\n**Components to build:**\n- Login Page\n- JWT Token Management\n- Route Guards (Admin/User roles)\n- Auto-logout on token expiry\n\n### 2. Layout Structure\n**Based on UI Design:**\n- **Sidebar Navigation:** Dark theme with collapsible menu\n  - Dashboard section\n  - File Management section (Society)\n  - Security section (User management)\n- **Top Bar:** App title, notifications, user profile, dark mode toggle\n- **Main Content Area:** Dynamic component rendering\n\n### 3. Dashboard Components\n\n#### Admin Dashboard\n- **Overview Cards:**\n  - Total Members (1,234 with +12% growth)\n  - Total Deposits (â‚¹45.2M with +8.5% growth)\n  - Active Loans (156 with +2.3% growth)\n  - Interest Earned (â‚¹2.1M with +15.2% growth)\n\n#### Quick Actions Section\n- **New Member:** Register new member\n- **New Deposit:** View/deposit receipt\n- **Process Loan:** Application processing\n\n### 4. User Management System\n\n#### Admin Panel Features:\n- **User Registration:** Create new users with roles\n- **User List:** View all users with role management\n- **Role Assignment:** Admin can assign/modify user roles\n- **User Profile Management:** Edit user details\n\n#### User Panel Features:\n- **Profile View:** Current user profile information\n- **Profile Edit:** Update personal information\n- **Password Change:** Secure password update\n\n### 5. Member Management System\n\n#### Member Operations:\n- **Member Registration:** Complete member onboarding form\n- **Member List:** Searchable and filterable member directory\n- **Member Profile:** Detailed view with all information\n- **Member Edit:** Update member information\n- **Approval System:** Pending changes review and approval\n\n#### Member Form Fields:\n- **Personal Information:**\n  - Name, Father's/Husband's Name\n  - Date of Birth\n  - Nominee and relationship\n- **Contact Information:**\n  - Office Address, Residential Address\n  - Office Phone, Residential Phone, Mobile\n  - Email\n- **Professional Information:**\n  - Designation, Branch, City\n  - Date of Joining Organization\n  - Date of Joining Society\n  - Date of Retirement (if applicable)\n- **Banking Information:**\n  - Bank Name, Account Number\n  - IFSC Code, Branch Name\n  - Account Holder Name\n\n### 6. Society Management System\n\n#### Society Configuration:\n- **Basic Information:**\n  - Society Name, Address, City\n  - Phone, Fax, Email, Website\n  - Registration Number\n- **Interest Rates Configuration:**\n  - Dividend Rate\n  - Overdraft (OD) Rate\n  - Certificate Deposit (CD) Rate\n  - Loan Interest Rate\n  - Emergency Loan Rate\n  - Loan Against Shares (LAS) Rate\n- **Limits Configuration:**\n  - Share Limit\n  - Loan Limit\n  - Emergency Loan Limit\n\n### 7. Approval Workflow System\n\n#### Features to implement:\n- **Pending Changes Dashboard:** List of all pending approvals\n- **Change Preview:** Side-by-side comparison of current vs proposed changes\n- **Approval Actions:** Approve/Reject buttons for each pending change\n- **Notification System:** Alert users about pending approvals\n\n## Implementation Phases\n\n### Phase 1: Foundation (Completed âœ“)\n- [x] Angular project setup with Tailwind CSS\n- [x] Basic routing and navigation\n- [x] Authentication service structure\n\n### Phase 2: Authentication & Layout (Next Priority)\n- [ ] JWT authentication service\n- [ ] Login/logout functionality\n- [ ] Protected routes with guards\n- [ ] Main layout with sidebar navigation\n- [ ] User profile management\n\n### Phase 3: User Management\n- [ ] Admin user registration form\n- [ ] User list with role management\n- [ ] User profile editing\n- [ ] Role-based access control\n\n### Phase 4: Member Management\n- [ ] Member registration form\n- [ ] Member list with search/filter\n- [ ] Member profile view/edit\n- [ ] Member approval workflow\n\n### Phase 5: Society Management\n- [ ] Society information management\n- [ ] Interest rates configuration\n- [ ] Limits configuration\n- [ ] Society change approval system\n\n### Phase 6: Dashboard & Analytics\n- [ ] Admin dashboard with statistics\n- [ ] User dashboard\n- [ ] Quick actions implementation\n- [ ] Notification system\n\n## API Integration Plan\n\n### Authentication Endpoints:\n- `POST /api/auth/login` - User login\n- `GET /api/users/me` - Current user profile\n- `POST /api/auth/register` - New user registration (admin only)\n\n### User Management Endpoints:\n- `GET /api/users` - Get all users (admin only)\n- `PUT /api/users/{id}/role` - Update user role (admin only)\n\n### Member Management Endpoints:\n- `GET /api/member` - Get all members\n- `GET /api/member/{id}` - Get member by ID\n- `POST /api/member` - Create new member\n- `PUT /api/member/{id}` - Update member\n- `POST /api/member/{id}/approve-changes` - Approve member changes\n- `GET /api/member/pending-changes` - Get pending member changes\n\n### Society Management Endpoints:\n- `GET /api/society` - Get society information\n- `PUT /api/society` - Update society information\n- `POST /api/society/approve-changes` - Approve society changes\n- `GET /api/society/pending-changes` - Get pending society changes\n\n## UI Components Design\n\n### Common Components:\n- **Form Components:** Input fields, date pickers, dropdowns\n- **Data Tables:** Sortable, filterable tables for lists\n- **Cards:** Information display cards\n- **Modals:** Confirmation dialogs, form modals\n- **Buttons:** Primary, secondary, danger action buttons\n- **Alerts:** Success, error, warning notifications\n\n### Styling Guidelines:\n- **Color Scheme:** Dark sidebar with purple accent (matching UI design)\n- **Typography:** Clean, readable fonts with proper hierarchy\n- **Spacing:** Consistent padding and margins using Tailwind\n- **Responsive Design:** Mobile-first approach with breakpoints\n\n## Security Considerations\n\n### Authentication:\n- JWT token storage in HTTP-only cookies or secure localStorage\n- Automatic token refresh before expiry\n- Secure logout with token invalidation\n\n### Authorization:\n- Role-based route protection\n- Component-level permission checking\n- API call authorization headers\n\n### Data Validation:\n- Client-side form validation\n- Server response error handling\n- Input sanitization\n\n## Current Status\n\n### âœ… Completed:\n1. Angular 20+ project setup with Tailwind CSS integration\n2. Basic project structure with routing\n3. Development server running on port 5000\n4. Tailwind CSS properly configured and working\n5. Basic navigation structure implemented\n\n### ðŸ”„ Next Steps:\n1. Implement JWT authentication service\n2. Create login page and user authentication\n3. Build main layout with sidebar navigation matching the UI design\n4. Set up API service layer for backend communication\n5. Implement user management features\n\n## File Structure Plan\n\n```\nsrc/\nâ”œâ”€â”€ app/\nâ”‚   â”œâ”€â”€ core/                    # Core services and guards\nâ”‚   â”‚   â”œâ”€â”€ services/\nâ”‚   â”‚   â”‚   â”œâ”€â”€ auth.service.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ api.service.ts\nâ”‚   â”‚   â”‚   â””â”€â”€ storage.service.ts\nâ”‚   â”‚   â”œâ”€â”€ guards/\nâ”‚   â”‚   â”‚   â”œâ”€â”€ auth.guard.ts\nâ”‚   â”‚   â”‚   â””â”€â”€ admin.guard.ts\nâ”‚   â”‚   â””â”€â”€ interceptors/\nâ”‚   â”‚       â””â”€â”€ auth.interceptor.ts\nâ”‚   â”œâ”€â”€ shared/                  # Shared components and utilities\nâ”‚   â”‚   â”œâ”€â”€ components/\nâ”‚   â”‚   â”œâ”€â”€ pipes/\nâ”‚   â”‚   â””â”€â”€ models/\nâ”‚   â”œâ”€â”€ features/                # Feature modules\nâ”‚   â”‚   â”œâ”€â”€ auth/\nâ”‚   â”‚   â”œâ”€â”€ dashboard/\nâ”‚   â”‚   â”œâ”€â”€ users/\nâ”‚   â”‚   â”œâ”€â”€ members/\nâ”‚   â”‚   â””â”€â”€ society/\nâ”‚   â””â”€â”€ layout/                  # Layout components\nâ”‚       â”œâ”€â”€ header/\nâ”‚       â”œâ”€â”€ sidebar/\nâ”‚       â””â”€â”€ main-layout/\n```\n\nThis comprehensive plan provides a roadmap for building a complete FINTCS frontend that matches your API structure and UI design requirements.","size_bytes":9350},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":82},"replit.md":{"content":"# Overview\n\nThis is a modern Angular frontend application called \"Fintcs Frontend\" that serves as a web application built with Angular 20+ and styled using Tailwind CSS. The application features a clean, responsive design with a navigation system, home page showcasing features, and an about page detailing the technical stack. It's configured for development with TypeScript strict mode and includes custom utility classes for consistent UI components.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Framework\nThe application uses Angular 20+ as the core frontend framework, leveraging the latest features and improvements. Angular was chosen for its robust ecosystem, TypeScript integration, and excellent tooling support through Angular CLI.\n\n## Styling Architecture\nTailwind CSS 4+ is integrated as the primary styling solution, providing a utility-first approach to CSS. This choice enables rapid UI development with consistent design patterns. The styling architecture includes:\n- PostCSS configuration for processing Tailwind directives\n- Custom utility classes defined in the global styles\n- Component-specific styling through Tailwind utilities\n- Custom color palette with primary brand colors\n- Responsive design with mobile-first approach\n\n## Application Structure\nThe application follows Angular's recommended project structure with:\n- Component-based architecture with separate home and about components\n- Router-based navigation for single-page application behavior\n- Modular organization with AppModule as the root module\n- TypeScript strict mode enabled for enhanced code quality and type safety\n\n## Build and Development\nThe build system is configured through Angular CLI with:\n- Development server configured to run on port 5000 with host 0.0.0.0\n- Production build optimizations including output hashing and bundle size limits\n- TypeScript compilation with ES2022 target for modern browser support\n- Source maps enabled for debugging\n\n## Navigation and Routing\nThe application implements client-side routing with:\n- Default route redirection to home page\n- Wildcard route handling for unknown paths\n- Active route highlighting in navigation\n- Router outlet for component rendering\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **Angular Framework**: Complete Angular ecosystem including core, common, forms, router, and platform-browser packages\n- **Angular CLI**: Development tools and build system for Angular applications\n- **RxJS**: Reactive programming library for handling asynchronous operations\n- **Zone.js**: Change detection mechanism for Angular applications\n\n## Styling and CSS Processing\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **PostCSS**: CSS transformation tool with autoprefixer plugin\n- **Autoprefixer**: Automatically adds vendor prefixes to CSS rules\n\n## Development Tools\n- **TypeScript**: Typed superset of JavaScript for enhanced development experience\n- **TSLib**: Runtime library for TypeScript helpers\n\nThe application currently operates as a standalone frontend without backend integrations, external APIs, or database connections. All functionality is client-side with static content and navigation.","size_bytes":3249},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{html,ts}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#eff6ff',\n          500: '#3b82f6',\n          600: '#2563eb',\n          700: '#1d4ed8',\n        }\n      }\n    },\n  },\n  plugins: [],\n}\n","size_bytes":319},"attached_assets/API_DOCUMENTATION_1756379998290.md":{"content":"# FintcsApi Documentation\n\n## Overview\n\nFintcsApi is a financial technology API built with ASP.NET Core that provides user authentication and management services with role-based access control. The system implements JWT-based authentication with comprehensive user profile management capabilities.\n\n## Base URL\n\n```\nhttp://localhost:5000\n```\n\n## Authentication\n\nThe API uses JWT (JSON Web Tokens) for authentication. Include the token in the Authorization header:\n\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\n```\n\n## Available Roles\n\n- `user` - Default role for all new registrations  \n- `admin` - Administrative access to all features (must be set manually)\n\n**Note:** All users register with `user` role by default. Admin privileges must be assigned manually through database or admin endpoints.\n\n---\n\n## Endpoints\n\n### 1. User Registration\n\n**Endpoint:** `POST /api/auth/register`\n\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE (admin authorization required)\n\n**Description:** Register a new user with optional role assignment.\n\n**Request Body:**\n```json\n{\n  \"username\": \"string (required, 3-50 characters)\",\n  \"password\": \"string (required, 6-100 characters)\",\n  \"email\": \"string (required, valid email format)\",\n  \"phone\": \"string (optional, valid phone format)\",\n  \"EDPNo\": \"string (optional)\",\n  \"Name\": \"string (optional)\", \n  \"AddressOffice\": \"string (optional)\",\n  \"AddressResidential\": \"string (optional)\",\n  \"Designation\": \"string (optional)\",\n  \"PhoneOffice\": \"string (optional)\",\n  \"PhoneResidential\": \"string (optional)\",\n  \"Mobile\": \"string (optional)\"\n}\n```\n\n**Note:** Role is automatically set to \"user\" for all registrations.\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"message\": \"User registered successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"username\": \"testuser\",\n    \"email\": \"user@example.com\",\n    \"phone\": \"+1234567890\",\n    \"roles\": \"user\",\n    \"details\": {\n      \"EDPNo\": \"EDP001\",\n      \"Name\": \"John Doe\",\n      \"AddressOffice\": \"123 Business Center\",\n      \"AddressResidential\": \"456 Home Street\",\n      \"Designation\": \"Software Engineer\",\n      \"PhoneOffice\": \"011-12345678\",\n      \"PhoneResidential\": \"011-87654321\",\n      \"Mobile\": \"+1234567890\",\n      \"Email\": \"user@example.com\"\n    },\n    \"createdAt\": \"2025-08-26T17:25:26.793Z\"\n  },\n  \"errors\": []\n}\n```\n\n**Failure Responses:**\n\n**400 Bad Request - User Already Exists:**\n```json\n{\n  \"success\": false,\n  \"message\": \"User already exists\",\n  \"data\": null,\n  \"errors\": [\"Username 'testuser' is already taken\"]\n}\n```\n\n**400 Bad Request - Email Already Registered:**\n```json\n{\n  \"success\": false,\n  \"message\": \"Email already registered\",\n  \"data\": null,\n  \"errors\": [\"Email 'user@example.com' is already registered\"]\n}\n```\n\n**400 Bad Request - Validation Error:**\n```json\n{\n  \"success\": false,\n  \"message\": \"Invalid input data\",\n  \"data\": null,\n  \"errors\": [\n    \"The Username field is required.\",\n    \"The Password field is required.\",\n    \"The Email field is required.\"\n  ]\n}\n```\n\n**500 Internal Server Error:**\n```json\n{\n  \"success\": false,\n  \"message\": \"Internal server error occurred during registration\",\n  \"data\": null,\n  \"errors\": [\"Detailed error message\"]\n}\n```\n\n---\n\n### 2. User Login\n\n**Endpoint:** `POST /api/auth/login`\n\n**Description:** Authenticate user and receive JWT token.\n\n**Request Body:**\n```json\n{\n  \"username\": \"string (required)\",\n  \"password\": \"string (required)\"\n}\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"message\": \"Login successful\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"username\": \"testuser\",\n    \"email\": \"user@example.com\",\n    \"phone\": \"+1234567890\",\n    \"roles\": \"user\",\n    \"details\": {\n      \"EDPNo\": \"EDP001\",\n      \"Name\": \"John Doe\",\n      \"AddressOffice\": \"123 Business Center\",\n      \"AddressResidential\": \"456 Home Street\",\n      \"Designation\": \"Software Engineer\",\n      \"PhoneOffice\": \"011-12345678\",\n      \"PhoneResidential\": \"011-87654321\",\n      \"Mobile\": \"+1234567890\",\n      \"Email\": \"user@example.com\"\n    },\n    \"expiresAt\": \"2025-08-26T19:25:32.314Z\"\n  },\n  \"errors\": []\n}\n```\n\n**Failure Responses:**\n\n**401 Unauthorized - Invalid Credentials:**\n```json\n{\n  \"success\": false,\n  \"message\": \"Invalid credentials\",\n  \"data\": null,\n  \"errors\": [\"Username or password is incorrect\"]\n}\n```\n\n**400 Bad Request - Validation Error:**\n```json\n{\n  \"success\": false,\n  \"message\": \"Invalid input data\",\n  \"data\": null,\n  \"errors\": [\n    \"The Username field is required.\",\n    \"The Password field is required.\"\n  ]\n}\n```\n\n**500 Internal Server Error:**\n```json\n{\n  \"success\": false,\n  \"message\": \"Internal server error occurred during login\",\n  \"data\": null,\n  \"errors\": [\"Detailed error message\"]\n}\n```\n\n---\n\n### 3. Get Valid Roles\n\n**Endpoint:** `GET /api/auth/roles`\n\n**Description:** Get list of all valid roles in the system.\n\n**Authentication:** Not required\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"message\": \"Valid roles retrieved successfully\",\n  \"data\": [\"user\", \"admin\"],\n  \"errors\": []\n}\n```\n\n---\n\n### 4. Get All Users (Admin Only)\n\n**Endpoint:** `GET /api/users`\n\n**Description:** Retrieve list of all users in the system.\n\n**Authentication:** Required (Admin role only)\n\n**Headers:**\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"message\": \"Users retrieved successfully\",\n  \"data\": [\n    {\n      \"id\": 1,\n      \"username\": \"admin\",\n      \"email\": \"admin@example.com\",\n      \"phone\": \"+1234567890\",\n      \"roles\": [\"admin\", \"user\"],\n      \"createdAt\": \"2025-08-26T17:24:44.220Z\"\n    },\n    {\n      \"id\": 2,\n      \"username\": \"testuser\",\n      \"email\": \"user@example.com\",\n      \"phone\": \"+9876543210\",\n      \"roles\": [\"user\"],\n      \"createdAt\": \"2025-08-26T17:25:26.793Z\"\n    }\n  ],\n  \"errors\": []\n}\n```\n\n**Failure Responses:**\n\n**401 Unauthorized - No Token:**\n```json\n{\n  \"type\": \"https://tools.ietf.org/html/rfc7235#section-3.1\",\n  \"title\": \"Unauthorized\",\n  \"status\": 401\n}\n```\n\n**403 Forbidden - Insufficient Role:**\n```json\n{\n  \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.3\",\n  \"title\": \"Forbidden\",\n  \"status\": 403\n}\n```\n\n**500 Internal Server Error:**\n```json\n{\n  \"success\": false,\n  \"message\": \"Error retrieving users\",\n  \"data\": null,\n  \"errors\": [\"Detailed error message\"]\n}\n```\n\n---\n\n### 5. Get Current User Profile\n\n**Endpoint:** `GET /api/users/me`\n\n**Description:** Get the profile information of the currently authenticated user.\n\n**Authentication:** Required\n\n**Headers:**\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"message\": \"User profile retrieved successfully\",\n  \"data\": {\n    \"id\": 2,\n    \"username\": \"testuser\",\n    \"email\": \"user@example.com\",\n    \"phone\": \"+9876543210\",\n    \"roles\": [\"user\"],\n    \"createdAt\": \"2025-08-26T17:25:26.793Z\"\n  },\n  \"errors\": []\n}\n```\n\n**Failure Responses:**\n\n**401 Unauthorized - Invalid Token:**\n```json\n{\n  \"success\": false,\n  \"message\": \"Invalid user token\",\n  \"data\": null,\n  \"errors\": []\n}\n```\n\n**404 Not Found - User Not Found:**\n```json\n{\n  \"success\": false,\n  \"message\": \"User not found\",\n  \"data\": null,\n  \"errors\": []\n}\n```\n\n**500 Internal Server Error:**\n```json\n{\n  \"success\": false,\n  \"message\": \"Error retrieving user profile\",\n  \"data\": null,\n  \"errors\": [\"Detailed error message\"]\n}\n```\n\n---\n\n### 6. Update User Role (Admin Only)\n\n**Endpoint:** `PUT /api/users/{id}/role`\n\n**Description:** Update the role assigned to a specific user.\n\n**Authentication:** Required (Admin role only)\n\n**Headers:**\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\nContent-Type: application/json\n```\n\n**URL Parameters:**\n- `id` (integer) - The ID of the user to update\n\n**Request Body:**\n```json\n[\"admin\", \"manager\"]\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"message\": \"User roles updated successfully\",\n  \"data\": {\n    \"id\": 2,\n    \"username\": \"testuser\",\n    \"email\": \"user@example.com\",\n    \"phone\": \"+9876543210\",\n    \"roles\": [\"admin\", \"manager\"],\n    \"createdAt\": \"2025-08-26T17:25:26.793Z\"\n  },\n  \"errors\": []\n}\n```\n\n**Failure Responses:**\n\n**404 Not Found - User Not Found:**\n```json\n{\n  \"success\": false,\n  \"message\": \"User not found\",\n  \"data\": null,\n  \"errors\": []\n}\n```\n\n**401 Unauthorized - No Token:**\n```json\n{\n  \"type\": \"https://tools.ietf.org/html/rfc7235#section-3.1\",\n  \"title\": \"Unauthorized\",\n  \"status\": 401\n}\n```\n\n**403 Forbidden - Insufficient Role:**\n```json\n{\n  \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.3\",\n  \"title\": \"Forbidden\",\n  \"status\": 403\n}\n```\n\n**500 Internal Server Error:**\n```json\n{\n  \"success\": false,\n  \"message\": \"Error updating user roles\",\n  \"data\": null,\n  \"errors\": [\"Detailed error message\"]\n}\n```\n\n---\n\n## Usage Examples\n\n### Example 1: Register a New Admin User\n\n```bash\ncurl -X POST \"http://localhost:5000/api/auth/register\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"adminuser\",\n    \"password\": \"AdminPass123!\",\n    \"email\": \"admin@company.com\",\n    \"phone\": \"+1234567890\",\n    \"roles\": [\"admin\", \"manager\"]\n  }'\n```\n\n### Example 2: Login and Get Token\n\n```bash\ncurl -X POST \"http://localhost:5000/api/auth/login\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"adminuser\",\n    \"password\": \"AdminPass123!\"\n  }'\n```\n\n### Example 3: Get All Users (Using Token)\n\n```bash\ncurl -X GET \"http://localhost:5000/api/users\" \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n```\n\n### Example 4: Update User Role\n\n```bash\ncurl -X PUT \"http://localhost:5000/api/users/2/role\" \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '\"admin\"'\n```\n\n---\n\n## Society Management\n\n### 7. Get Society Information\n\n**Endpoint:** `GET /api/society`\n\n**Description:** Retrieve current society configuration information.\n\n**Authentication:** Required\n\n**Headers:**\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"societyName\": \"ABC Credit Society\",\n    \"address\": \"123 Main Street\",\n    \"city\": \"Mumbai\",\n    \"phone\": \"022-12345678\",\n    \"fax\": \"022-87654321\",\n    \"email\": \"contact@abcsociety.com\",\n    \"website\": \"https://www.abcsociety.com\",\n    \"registrationNumber\": \"REG001\",\n    \"tabs\": \"{\\\"Interest\\\":{\\\"Dividend\\\":8.5,\\\"OD\\\":12.0,\\\"CD\\\":6.0,\\\"Loan\\\":10.0,\\\"EmergencyLoan\\\":15.0,\\\"LAS\\\":7.0},\\\"Limit\\\":{\\\"Share\\\":100000,\\\"Loan\\\":500000,\\\"EmergencyLoan\\\":50000}}\",\n    \"isPendingApproval\": false,\n    \"createdAt\": \"2025-01-01T10:00:00.000Z\",\n    \"updatedAt\": \"2025-01-01T10:00:00.000Z\"\n  },\n  \"message\": null\n}\n```\n\n**Success Response - No Society Found (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 0,\n    \"societyName\": \"\",\n    \"address\": \"\",\n    \"city\": \"\",\n    \"phone\": \"\",\n    \"fax\": \"\",\n    \"email\": \"\",\n    \"website\": \"\",\n    \"registrationNumber\": \"\",\n    \"tabs\": \"{}\",\n    \"isPendingApproval\": false,\n    \"createdAt\": \"0001-01-01T00:00:00\",\n    \"updatedAt\": \"0001-01-01T00:00:00\"\n  },\n  \"message\": \"No society configuration found. Using default values.\"\n}\n```\n\n---\n\n### 8. Update Society Information (Admin Only)\n\n**Endpoint:** `PUT /api/society`\n\n**Description:** Submit society information updates for approval. Changes will be pending until approved by all users.\n\n**Authentication:** Required (Admin role only)\n\n**Headers:**\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\nContent-Type: application/json\n```\n\n**Request Body:**\n```json\n{\n  \"societyName\": \"ABC Credit Society Ltd\",\n  \"address\": \"456 Updated Street\",\n  \"city\": \"Mumbai\",\n  \"phone\": \"022-11223344\",\n  \"fax\": \"022-44332211\",\n  \"email\": \"info@abcsociety.com\",\n  \"website\": \"https://www.abcsociety.org\",\n  \"registrationNumber\": \"REG001-UPD\",\n  \"tabs\": {\n    \"interest\": {\n      \"dividend\": 9.0,\n      \"od\": 12.5,\n      \"cd\": 6.5,\n      \"loan\": 10.5,\n      \"emergencyLoan\": 15.5,\n      \"las\": 7.5\n    },\n    \"limit\": {\n      \"share\": 150000,\n      \"loan\": 600000,\n      \"emergencyLoan\": 75000\n    }\n  }\n}\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"message\": \"Society update submitted for approval. All users must approve before changes become permanent.\"\n}\n```\n\n---\n\n### 9. Approve Society Changes\n\n**Endpoint:** `POST /api/society/approve-changes`\n\n**Description:** Approve and apply pending society changes.\n\n**Authentication:** Required\n\n**Headers:**\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"societyName\": \"ABC Credit Society Ltd\",\n    \"address\": \"456 Updated Street\",\n    \"city\": \"Mumbai\",\n    \"phone\": \"022-11223344\",\n    \"fax\": \"022-44332211\",\n    \"email\": \"info@abcsociety.com\",\n    \"website\": \"https://www.abcsociety.org\",\n    \"registrationNumber\": \"REG001-UPD\",\n    \"tabs\": \"{\\\"Interest\\\":{\\\"Dividend\\\":9.0,\\\"OD\\\":12.5,\\\"CD\\\":6.5,\\\"Loan\\\":10.5,\\\"EmergencyLoan\\\":15.5,\\\"LAS\\\":7.5},\\\"Limit\\\":{\\\"Share\\\":150000,\\\"Loan\\\":600000,\\\"EmergencyLoan\\\":75000}}\",\n    \"isPendingApproval\": false,\n    \"createdAt\": \"2025-01-01T10:00:00.000Z\",\n    \"updatedAt\": \"2025-01-01T12:00:00.000Z\"\n  },\n  \"message\": \"Society changes approved and applied successfully\"\n}\n```\n\n**Failure Response - No Pending Changes (400 Bad Request):**\n```json\n{\n  \"success\": false,\n  \"message\": \"No pending changes to approve\"\n}\n```\n\n---\n\n### 10. Get Society Pending Changes\n\n**Endpoint:** `GET /api/society/pending-changes`\n\n**Description:** Check if there are pending society changes awaiting approval.\n\n**Authentication:** Required\n\n**Headers:**\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\n```\n\n**Success Response - Has Pending Changes (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"hasPendingChanges\": true,\n    \"pendingChanges\": \"{\\\"SocietyName\\\":\\\"ABC Credit Society Ltd\\\",\\\"Address\\\":\\\"456 Updated Street\\\",\\\"City\\\":\\\"Mumbai\\\",\\\"Phone\\\":\\\"022-11223344\\\",\\\"Fax\\\":\\\"022-44332211\\\",\\\"Email\\\":\\\"info@abcsociety.com\\\",\\\"Website\\\":\\\"https://www.abcsociety.org\\\",\\\"RegistrationNumber\\\":\\\"REG001-UPD\\\",\\\"Tabs\\\":{\\\"Interest\\\":{\\\"Dividend\\\":9.0,\\\"OD\\\":12.5,\\\"CD\\\":6.5,\\\"Loan\\\":10.5,\\\"EmergencyLoan\\\":15.5,\\\"LAS\\\":7.5},\\\"Limit\\\":{\\\"Share\\\":150000,\\\"Loan\\\":600000,\\\"EmergencyLoan\\\":75000}}}\"\n  },\n  \"message\": null\n}\n```\n\n**Success Response - No Pending Changes (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": null,\n  \"message\": \"No pending changes\"\n}\n```\n\n---\n\n## Member Management\n\n### 11. Get All Members\n\n**Endpoint:** `GET /api/member`\n\n**Description:** Retrieve list of all members in the society.\n\n**Authentication:** Required\n\n**Headers:**\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"memNo\": \"MEM_001\",\n      \"name\": \"John Doe\",\n      \"fhName\": \"Robert Doe\",\n      \"officeAddress\": \"123 Business Center\",\n      \"city\": \"Mumbai\",\n      \"phoneOffice\": \"022-12345678\",\n      \"branch\": \"IT Department\",\n      \"phoneRes\": \"022-87654321\",\n      \"mobile\": \"9876543210\",\n      \"designation\": \"Software Engineer\",\n      \"residenceAddress\": \"456 Home Street\",\n      \"dob\": \"1985-06-15T00:00:00\",\n      \"dojSociety\": \"2020-01-01T00:00:00\",\n      \"email\": \"john.doe@company.com\",\n      \"dojOrg\": \"2018-03-15T00:00:00\",\n      \"dor\": null,\n      \"nominee\": \"Jane Doe\",\n      \"nomineeRelation\": \"Wife\",\n      \"bankingDetails\": {\n        \"bankName\": \"State Bank of India\",\n        \"accountNumber\": \"12345678901\",\n        \"ifscCode\": \"SBIN0001234\",\n        \"branch\": \"Main Branch\"\n      },\n      \"isPendingApproval\": false,\n      \"createdAt\": \"2025-01-01T10:00:00.000Z\",\n      \"updatedAt\": \"2025-01-01T10:00:00.000Z\"\n    }\n  ]\n}\n```\n\n---\n\n### 12. Get Member by ID\n\n**Endpoint:** `GET /api/member/{id}`\n\n**Description:** Retrieve detailed information of a specific member.\n\n**Authentication:** Required\n\n**Headers:**\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\n```\n\n**URL Parameters:**\n- `id` (integer) - The ID of the member\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"memNo\": \"MEM_001\",\n    \"name\": \"John Doe\",\n    \"fhName\": \"Robert Doe\",\n    \"officeAddress\": \"123 Business Center\",\n    \"city\": \"Mumbai\",\n    \"phoneOffice\": \"022-12345678\",\n    \"branch\": \"IT Department\",\n    \"phoneRes\": \"022-87654321\",\n    \"mobile\": \"9876543210\",\n    \"designation\": \"Software Engineer\",\n    \"residenceAddress\": \"456 Home Street\",\n    \"dob\": \"1985-06-15T00:00:00\",\n    \"dojSociety\": \"2020-01-01T00:00:00\",\n    \"email\": \"john.doe@company.com\",\n    \"dojOrg\": \"2018-03-15T00:00:00\",\n    \"dor\": null,\n    \"nominee\": \"Jane Doe\",\n    \"nomineeRelation\": \"Wife\",\n    \"bankingDetails\": {\n      \"bankName\": \"State Bank of India\",\n      \"accountNumber\": \"12345678901\",\n      \"ifscCode\": \"SBIN0001234\",\n      \"branch\": \"Main Branch\"\n    },\n    \"isPendingApproval\": false,\n    \"createdAt\": \"2025-01-01T10:00:00.000Z\",\n    \"updatedAt\": \"2025-01-01T10:00:00.000Z\"\n  }\n}\n```\n\n**Failure Response - Member Not Found (404 Not Found):**\n```json\n{\n  \"success\": false,\n  \"message\": \"Member not found\"\n}\n```\n\n---\n\n### 13. Create New Member\n\n**Endpoint:** `POST /api/member`\n\n**Description:** Create a new member with auto-generated member number.\n\n**Authentication:** Required\n\n**Headers:**\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\nContent-Type: application/json\n```\n\n**Request Body:**\n```json\n{\n  \"name\": \"John Doe\",\n  \"fhName\": \"Robert Doe\",\n  \"officeAddress\": \"123 Business Center\",\n  \"city\": \"Mumbai\",\n  \"phoneOffice\": \"022-12345678\",\n  \"branch\": \"IT Department\",\n  \"phoneRes\": \"022-87654321\",\n  \"mobile\": \"9876543210\",\n  \"designation\": \"Software Engineer\",\n  \"residenceAddress\": \"456 Home Street\",\n  \"dob\": \"1985-06-15T00:00:00\",\n  \"dojSociety\": \"2020-01-01T00:00:00\",\n  \"email\": \"john.doe@company.com\",\n  \"dojOrg\": \"2018-03-15T00:00:00\",\n  \"dor\": null,\n  \"nominee\": \"Jane Doe\",\n  \"nomineeRelation\": \"Wife\",\n  \"bankingDetails\": {\n    \"bankName\": \"State Bank of India\",\n    \"accountNumber\": \"12345678901\",\n    \"ifscCode\": \"SBIN0001234\",\n    \"branch\": \"Main Branch\"\n  }\n}\n```\n\n**Success Response (201 Created):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"memNo\": \"MEM_001\",\n    \"name\": \"John Doe\",\n    \"fhName\": \"Robert Doe\",\n    \"officeAddress\": \"123 Business Center\",\n    \"city\": \"Mumbai\",\n    \"phoneOffice\": \"022-12345678\",\n    \"branch\": \"IT Department\",\n    \"phoneRes\": \"022-87654321\",\n    \"mobile\": \"9876543210\",\n    \"designation\": \"Software Engineer\",\n    \"residenceAddress\": \"456 Home Street\",\n    \"dob\": \"1985-06-15T00:00:00\",\n    \"dojSociety\": \"2020-01-01T00:00:00\",\n    \"email\": \"john.doe@company.com\",\n    \"dojOrg\": \"2018-03-15T00:00:00\",\n    \"dor\": null,\n    \"nominee\": \"Jane Doe\",\n    \"nomineeRelation\": \"Wife\",\n    \"bankingDetails\": {\n      \"bankName\": \"State Bank of India\",\n      \"accountNumber\": \"12345678901\",\n      \"ifscCode\": \"SBIN0001234\",\n      \"branch\": \"Main Branch\"\n    },\n    \"isPendingApproval\": false,\n    \"createdAt\": \"2025-01-01T10:00:00.000Z\",\n    \"updatedAt\": \"2025-01-01T10:00:00.000Z\"\n  },\n  \"message\": \"Member created successfully\"\n}\n```\n\n---\n\n### 14. Update Member Information\n\n**Endpoint:** `PUT /api/member/{id}`\n\n**Description:** Submit member information updates for approval. Changes will be pending until approved.\n\n**Authentication:** Required\n\n**Headers:**\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\nContent-Type: application/json\n```\n\n**URL Parameters:**\n- `id` (integer) - The ID of the member to update\n\n**Request Body:**\n```json\n{\n  \"name\": \"John Updated Doe\",\n  \"fhName\": \"Robert Doe\",\n  \"officeAddress\": \"789 New Business Center\",\n  \"city\": \"Mumbai\",\n  \"phoneOffice\": \"022-11223344\",\n  \"branch\": \"IT Department\",\n  \"phoneRes\": \"022-44332211\",\n  \"mobile\": \"9876543210\",\n  \"designation\": \"Senior Software Engineer\",\n  \"residenceAddress\": \"456 Home Street\",\n  \"dob\": \"1985-06-15T00:00:00\",\n  \"dojSociety\": \"2020-01-01T00:00:00\",\n  \"email\": \"john.doe@company.com\",\n  \"dojOrg\": \"2018-03-15T00:00:00\",\n  \"dor\": null,\n  \"nominee\": \"Jane Doe\",\n  \"nomineeRelation\": \"Wife\",\n  \"bankingDetails\": {\n    \"bankName\": \"HDFC Bank\",\n    \"accountNumber\": \"98765432101\",\n    \"ifscCode\": \"HDFC0001234\",\n    \"branch\": \"New Branch\"\n  }\n}\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"message\": \"Member update submitted for approval. All users must approve before changes become permanent.\"\n}\n```\n\n**Failure Response - Member Not Found (404 Not Found):**\n```json\n{\n  \"success\": false,\n  \"message\": \"Member not found\"\n}\n```\n\n---\n\n### 15. Approve Member Changes\n\n**Endpoint:** `POST /api/member/{id}/approve-changes`\n\n**Description:** Approve and apply pending member changes.\n\n**Authentication:** Required\n\n**Headers:**\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\n```\n\n**URL Parameters:**\n- `id` (integer) - The ID of the member\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"memNo\": \"MEM_001\",\n    \"name\": \"John Updated Doe\",\n    \"fhName\": \"Robert Doe\",\n    \"officeAddress\": \"789 New Business Center\",\n    \"city\": \"Mumbai\",\n    \"phoneOffice\": \"022-11223344\",\n    \"branch\": \"IT Department\",\n    \"phoneRes\": \"022-44332211\",\n    \"mobile\": \"9876543210\",\n    \"designation\": \"Senior Software Engineer\",\n    \"residenceAddress\": \"456 Home Street\",\n    \"dob\": \"1985-06-15T00:00:00\",\n    \"dojSociety\": \"2020-01-01T00:00:00\",\n    \"email\": \"john.doe@company.com\",\n    \"dojOrg\": \"2018-03-15T00:00:00\",\n    \"dor\": null,\n    \"nominee\": \"Jane Doe\",\n    \"nomineeRelation\": \"Wife\",\n    \"bankingDetails\": {\n      \"bankName\": \"HDFC Bank\",\n      \"accountNumber\": \"98765432101\",\n      \"ifscCode\": \"HDFC0001234\",\n      \"branch\": \"New Branch\"\n    },\n    \"isPendingApproval\": false,\n    \"createdAt\": \"2025-01-01T10:00:00.000Z\",\n    \"updatedAt\": \"2025-01-01T12:00:00.000Z\"\n  },\n  \"message\": \"Member changes approved and applied successfully\"\n}\n```\n\n**Failure Response - No Pending Changes (400 Bad Request):**\n```json\n{\n  \"success\": false,\n  \"message\": \"No pending changes to approve for this member\"\n}\n```\n\n---\n\n### 16. Get Members with Pending Changes\n\n**Endpoint:** `GET /api/member/pending-changes`\n\n**Description:** Retrieve list of all members that have pending changes awaiting approval.\n\n**Authentication:** Required\n\n**Headers:**\n```\nAuthorization: Bearer YOUR_JWT_TOKEN_HERE\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"memNo\": \"MEM_001\",\n      \"name\": \"John Doe\",\n      \"pendingChanges\": \"{\\\"Name\\\":\\\"John Updated Doe\\\",\\\"FHName\\\":\\\"Robert Doe\\\",\\\"OfficeAddress\\\":\\\"789 New Business Center\\\",\\\"City\\\":\\\"Mumbai\\\",\\\"PhoneOffice\\\":\\\"022-11223344\\\",\\\"Branch\\\":\\\"IT Department\\\",\\\"PhoneRes\\\":\\\"022-44332211\\\",\\\"Mobile\\\":\\\"9876543210\\\",\\\"Designation\\\":\\\"Senior Software Engineer\\\",\\\"ResidenceAddress\\\":\\\"456 Home Street\\\",\\\"DOB\\\":\\\"1985-06-15T00:00:00\\\",\\\"DOJSociety\\\":\\\"2020-01-01T00:00:00\\\",\\\"Email\\\":\\\"john.doe@company.com\\\",\\\"DOJOrg\\\":\\\"2018-03-15T00:00:00\\\",\\\"DOR\\\":null,\\\"Nominee\\\":\\\"Jane Doe\\\",\\\"NomineeRelation\\\":\\\"Wife\\\",\\\"BankingDetails\\\":{\\\"BankName\\\":\\\"HDFC Bank\\\",\\\"AccountNumber\\\":\\\"98765432101\\\",\\\"IfscCode\\\":\\\"HDFC0001234\\\",\\\"Branch\\\":\\\"New Branch\\\"}}\"\n    }\n  ]\n}\n```\n\n---\n\n## Error Codes Summary\n\n| HTTP Status | Description |\n|-------------|-------------|\n| 200 | Success |\n| 400 | Bad Request - Invalid input data or business logic error |\n| 401 | Unauthorized - Missing or invalid authentication token |\n| 403 | Forbidden - Insufficient permissions for the requested operation |\n| 404 | Not Found - Requested resource does not exist |\n| 500 | Internal Server Error - Unexpected server error |\n\n---\n\n## Role-Based Access Control\n\n| Endpoint | Roles Required |\n|----------|----------------|\n| `POST /api/auth/register` | Admin |\n| `POST /api/auth/login` | None (Public) |\n| `GET /api/auth/roles` | None (Public) |\n| `GET /api/users` | Admin |\n| `GET /api/users/me` | Any authenticated user |\n| `PUT /api/users/{id}/roles` | Admin |\n| `GET /api/society` | Any authenticated user |\n| `PUT /api/society` | Admin |\n| `POST /api/society/approve-changes` | Any authenticated user |\n| `GET /api/society/pending-changes` | Any authenticated user |\n| `GET /api/member` | Any authenticated user |\n| `GET /api/member/{id}` | Any authenticated user |\n| `POST /api/member` | Any authenticated user |\n| `PUT /api/member/{id}` | Any authenticated user |\n| `POST /api/member/{id}/approve-changes` | Any authenticated user |\n| `GET /api/member/pending-changes` | Any authenticated user |\n\n---\n\n## Token Information\n\n- **Token Type:** JWT (JSON Web Token)\n- **Expiration:** 2 hours from login\n- **Claims Included:**\n  - `unique_name` - Username\n  - `UserId` - User ID\n  - `Email` - User email\n  - `role` - Array of user roles\n\n---\n\n## Database\n\nThe API uses SQLite database with the following table structure:\n\n**Users Table:**\n- `Id` - Primary key (auto-increment)\n- `Username` - Unique username\n- `PasswordHash` - BCrypt hashed password\n- `Details` - JSON string containing email, phone, and roles\n- `CreatedAt` - Timestamp of user creation\n- `UpdatedAt` - Timestamp of last update\n\n## Manual Admin User Creation\n\nTo create an admin user manually, execute this SQL query in your SQLite database:\n\n```sql\n-- First, create the JSON details for the admin user\n-- Note: Replace the password hash below with a fresh BCrypt hash of \"admin\"\nINSERT INTO Users (Username, PasswordHash, Details, CreatedAt, UpdatedAt)\nVALUES (\n  'admin', \n  '$2a$11$EXAMPLE_REPLACE_WITH_ACTUAL_BCRYPT_HASH_OF_admin_PASSWORD', \n  '{\"email\":\"admin@fintcs.com\",\"phone\":\"9876543210\",\"role\":\"admin\",\"EDPNo\":\"EDP001\",\"Name\":\"Society Administrator\",\"AddressOffice\":\"123 Finance Tower, City Center\",\"AddressResidential\":\"45 Admin Colony, Main Road\",\"Designation\":\"Super Admin\",\"PhoneOffice\":\"011-22445566\",\"PhoneResidential\":\"011-77889900\",\"Mobile\":\"9876543210\"}',\n  datetime('now'),\n  datetime('now')\n);\n```\n\n**Admin User Details:**\n- **Username:** admin\n- **Password:** admin  \n- **Email:** admin@fintcs.com\n- **Phone:** 9876543210\n- **Role:** admin\n- **Complete Profile:** Includes EDP number, addresses, designations, etc.\n\n**Note:** Generate a proper BCrypt hash for the password \"admin\" and replace the example hash in the SQL query above.","size_bytes":26105},"attached_assets/DTOs_1756380383587.cs":{"content":"// Models/DTOs.cs\nusing System.ComponentModel.DataAnnotations;\n\nnamespace FintcsApi.Models\n{\n    public class LoginDto\n    {\n        [Required]\n        public string Username { get; set; } = string.Empty;\n        \n        [Required]\n        public string Password { get; set; } = string.Empty;\n    }\n\n    public class RegisterDto\n    {\n        [Required]\n        [StringLength(50, MinimumLength = 3)]\n        public string Username { get; set; } = string.Empty;\n\n        [Required]\n        [StringLength(100, MinimumLength = 6)]\n        public string Password { get; set; } = string.Empty;\n\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; } = string.Empty;\n\n        [Phone]\n        public string Phone { get; set; } = string.Empty;\n\n        // Extended user details\n        public string EDPNo { get; set; } = string.Empty;\n        public string Name { get; set; } = string.Empty;\n        public string AddressOffice { get; set; } = string.Empty;\n        public string AddressResidential { get; set; } = string.Empty;\n        public string Designation { get; set; } = string.Empty;\n        public string PhoneOffice { get; set; } = string.Empty;\n        public string PhoneResidential { get; set; } = string.Empty;\n        public string Mobile { get; set; } = string.Empty;\n    }\n\n    public class UserResponseDto\n    {\n        public int Id { get; set; }\n        public string Username { get; set; } = string.Empty;\n        public string Email { get; set; } = string.Empty;\n        public string Phone { get; set; } = string.Empty;\n        public string Roles { get; set; } = \"user\";\n        public UserDetailsDto Details { get; set; } = new UserDetailsDto();\n        public DateTime CreatedAt { get; set; }\n    }\n\n    public class UserDetailsDto\n    {\n        public string EDPNo { get; set; } = string.Empty;\n        public string Name { get; set; } = string.Empty;\n        public string AddressOffice { get; set; } = string.Empty;\n        public string AddressResidential { get; set; } = string.Empty;\n        public string Designation { get; set; } = string.Empty;\n        public string PhoneOffice { get; set; } = string.Empty;\n        public string PhoneResidential { get; set; } = string.Empty;\n        public string Mobile { get; set; } = string.Empty;\n        public string Email { get; set; } = string.Empty;\n    }\n\n    public class LoginResponseDto\n    {\n        public string Token { get; set; } = string.Empty;\n        public string Username { get; set; } = string.Empty;\n        public string Email { get; set; } = string.Empty;\n        public string Phone { get; set; } = string.Empty;\n        public string Roles { get; set; } = \"user\";\n        public UserDetailsDto Details { get; set; } = new UserDetailsDto();\n        public DateTime ExpiresAt { get; set; }\n    }\n\n    public class ApiResponse<T>\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; } = string.Empty;\n        public T? Data { get; set; }\n        public string[] Errors { get; set; } = Array.Empty<string>();\n    }\n}\n","size_bytes":3074},"attached_assets/Member_1756380383588.cs":{"content":"// Models/Member.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace FintcsApi.Models\n{\n    public class Member\n    {\n        [Key]\n        public int Id { get; set; }\n        \n        // Auto-generated member number (MEM_001, MEM_002, etc.)\n        public string MemNo { get; set; } = \"\";\n        \n        public string Name { get; set; } = \"\";\n        public string FHName { get; set; } = \"\";\n        public string OfficeAddress { get; set; } = \"\";\n        public string City { get; set; } = \"\";\n        public string PhoneOffice { get; set; } = \"\";\n        public string Branch { get; set; } = \"\";\n        public string PhoneRes { get; set; } = \"\";\n        public string Mobile { get; set; } = \"\";\n        public string Designation { get; set; } = \"\";\n        public string ResidenceAddress { get; set; } = \"\";\n        \n        public DateTime DOB { get; set; }\n        public DateTime DOJSociety { get; set; }\n        public string Email { get; set; } = \"\";\n        public DateTime DOJOrg { get; set; }\n        public DateTime? DOR { get; set; } // Nullable for active members\n        \n        public string Nominee { get; set; } = \"\";\n        public string NomineeRelation { get; set; } = \"\";\n        \n        // JSON string for banking details\n        public string BankingDetails { get; set; } = \"{}\";\n        \n        public bool IsPendingApproval { get; set; } = false;\n        \n        // JSON string to store pending changes until approved\n        public string PendingChanges { get; set; } = \"{}\";\n        \n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n\n    // DTO classes for banking details\n    public class BankingDetailsDto\n    {\n        public string BankName { get; set; } = \"\";\n        public string AccountNumber { get; set; } = \"\";\n        public string IFSCCode { get; set; } = \"\";\n        public string BranchName { get; set; } = \"\";\n        public string AccountHolderName { get; set; } = \"\";\n    }\n\n    public class MemberCreateDto\n    {\n        [Required]\n        public string Name { get; set; } = \"\";\n        public string FHName { get; set; } = \"\";\n        public string OfficeAddress { get; set; } = \"\";\n        public string City { get; set; } = \"\";\n        public string PhoneOffice { get; set; } = \"\";\n        public string Branch { get; set; } = \"\";\n        public string PhoneRes { get; set; } = \"\";\n        public string Mobile { get; set; } = \"\";\n        public string Designation { get; set; } = \"\";\n        public string ResidenceAddress { get; set; } = \"\";\n        \n        public DateTime DOB { get; set; }\n        public DateTime DOJSociety { get; set; }\n        public string Email { get; set; } = \"\";\n        public DateTime DOJOrg { get; set; }\n        public DateTime? DOR { get; set; }\n        \n        public string Nominee { get; set; } = \"\";\n        public string NomineeRelation { get; set; } = \"\";\n        public BankingDetailsDto BankingDetails { get; set; } = new();\n    }\n\n    public class MemberUpdateDto\n    {\n        public string Name { get; set; } = \"\";\n        public string FHName { get; set; } = \"\";\n        public string OfficeAddress { get; set; } = \"\";\n        public string City { get; set; } = \"\";\n        public string PhoneOffice { get; set; } = \"\";\n        public string Branch { get; set; } = \"\";\n        public string PhoneRes { get; set; } = \"\";\n        public string Mobile { get; set; } = \"\";\n        public string Designation { get; set; } = \"\";\n        public string ResidenceAddress { get; set; } = \"\";\n        \n        public DateTime DOB { get; set; }\n        public DateTime DOJSociety { get; set; }\n        public string Email { get; set; } = \"\";\n        public DateTime DOJOrg { get; set; }\n        public DateTime? DOR { get; set; }\n        \n        public string Nominee { get; set; } = \"\";\n        public string NomineeRelation { get; set; } = \"\";\n        public BankingDetailsDto BankingDetails { get; set; } = new();\n    }\n\n    public class MemberResponseDto\n    {\n        public int Id { get; set; }\n        public string MemNo { get; set; } = \"\";\n        public string Name { get; set; } = \"\";\n        public string FHName { get; set; } = \"\";\n        public string OfficeAddress { get; set; } = \"\";\n        public string City { get; set; } = \"\";\n        public string PhoneOffice { get; set; } = \"\";\n        public string Branch { get; set; } = \"\";\n        public string PhoneRes { get; set; } = \"\";\n        public string Mobile { get; set; } = \"\";\n        public string Designation { get; set; } = \"\";\n        public string ResidenceAddress { get; set; } = \"\";\n        public DateTime DOB { get; set; }\n        public DateTime DOJSociety { get; set; }\n        public string Email { get; set; } = \"\";\n        public DateTime DOJOrg { get; set; }\n        public DateTime? DOR { get; set; }\n        public string Nominee { get; set; } = \"\";\n        public string NomineeRelation { get; set; } = \"\";\n        public BankingDetailsDto BankingDetails { get; set; } = new();\n        public bool IsPendingApproval { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime UpdatedAt { get; set; }\n    }\n}","size_bytes":5267},"attached_assets/Society_1756380383588.cs":{"content":"// Models/Society.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace FintcsApi.Models\n{\n    public class Society\n    {\n        [Key]\n        public int Id { get; set; }\n        \n        public string SocietyName { get; set; } = \"\";\n        public string Address { get; set; } = \"\";\n        public string City { get; set; } = \"\";\n        public string Phone { get; set; } = \"\";\n        public string Fax { get; set; } = \"\";\n        public string Email { get; set; } = \"\";\n        public string Website { get; set; } = \"\";\n        public string RegistrationNumber { get; set; } = \"\";\n        \n        // JSON string for tabs configuration\n        public string Tabs { get; set; } = \"{}\";\n        \n        public bool IsPendingApproval { get; set; } = false;\n        \n        // JSON string to store pending changes until approved\n        public string PendingChanges { get; set; } = \"{}\";\n        \n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n\n    // DTO classes for the tabs structure\n    public class SocietyTabsDto\n    {\n        public InterestRatesDto Interest { get; set; } = new();\n        public LimitsDto Limit { get; set; } = new();\n    }\n\n    public class InterestRatesDto\n    {\n        public decimal Dividend { get; set; }\n        public decimal OD { get; set; }\n        public decimal CD { get; set; }\n        public decimal Loan { get; set; }\n        public decimal EmergencyLoan { get; set; }\n        public decimal LAS { get; set; }\n    }\n\n    public class LimitsDto\n    {\n        public decimal Share { get; set; }\n        public decimal Loan { get; set; }\n        public decimal EmergencyLoan { get; set; }\n    }\n\n    public class SocietyUpdateDto\n    {\n        public string SocietyName { get; set; } = \"\";\n        public string Address { get; set; } = \"\";\n        public string City { get; set; } = \"\";\n        public string Phone { get; set; } = \"\";\n        public string Fax { get; set; } = \"\";\n        public string Email { get; set; } = \"\";\n        public string Website { get; set; } = \"\";\n        public string RegistrationNumber { get; set; } = \"\";\n        public SocietyTabsDto Tabs { get; set; } = new();\n    }\n}","size_bytes":2294},"attached_assets/User_1756380383589.cs":{"content":"// Models/User.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace FintcsApi.Models\n{\n    public class User\n    {\n        [Key]\n        public int Id { get; set; }\n\n        [Required]\n        [StringLength(50)]\n        public string Username { get; set; } = string.Empty;\n\n        [Required]\n        public string PasswordHash { get; set; } = string.Empty;\n\n        // Store user details as JSON string (includes email, phone, roles)\n        public string Details { get; set; } = \"{}\";\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        // Helper method to get role from Details JSON\n        [NotMapped]\n        public string Role\n        {\n            get\n            {\n                try\n                {\n                    var details = System.Text.Json.JsonSerializer.Deserialize<UserDetails>(Details);\n                    return details?.role ?? \"user\";\n                }\n                catch\n                {\n                    return \"user\";\n                }\n            }\n        }\n\n        // Helper method to get email from Details JSON\n        [NotMapped]\n        public string Email\n        {\n            get\n            {\n                try\n                {\n                    var details = System.Text.Json.JsonSerializer.Deserialize<UserDetails>(Details);\n                    return details?.email ?? string.Empty;\n                }\n                catch\n                {\n                    return string.Empty;\n                }\n            }\n        }\n\n        // Helper method to get phone from Details JSON\n        [NotMapped]\n        public string Phone\n        {\n            get\n            {\n                try\n                {\n                    var details = System.Text.Json.JsonSerializer.Deserialize<UserDetails>(Details);\n                    return details?.phone ?? string.Empty;\n                }\n                catch\n                {\n                    return string.Empty;\n                }\n            }\n        }\n    }\n\n    public class UserDetails\n    {\n        public string email { get; set; } = string.Empty;\n        public string phone { get; set; } = string.Empty;\n        public string role { get; set; } = \"user\";\n        public string EDPNo { get; set; } = string.Empty;\n        public string Name { get; set; } = string.Empty;\n        public string AddressOffice { get; set; } = string.Empty;\n        public string AddressResidential { get; set; } = string.Empty;\n        public string Designation { get; set; } = string.Empty;\n        public string PhoneOffice { get; set; } = string.Empty;\n        public string PhoneResidential { get; set; } = string.Empty;\n        public string Mobile { get; set; } = string.Empty;\n    }\n}\n","size_bytes":2842},"src/main.ts":{"content":"import 'zone.js';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","size_bytes":230},"src/styles.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom base styles */\n@layer base {\n  body {\n    @apply font-sans antialiased;\n  }\n}\n\n/* Custom component styles */\n@layer components {\n  .btn-primary {\n    @apply bg-primary-600 hover:bg-primary-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200;\n  }\n  \n  .btn-secondary {\n    @apply bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors duration-200;\n  }\n  \n  .card {\n    @apply bg-white rounded-lg shadow-md p-6 border border-gray-200;\n  }\n}\n","size_bytes":577},"src/app/app-routing.module.ts":{"content":"import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/auth/login', pathMatch: 'full' },\n  { \n    path: 'auth', \n    loadChildren: () => import('./features/auth/auth.module').then(m => m.AuthModule) \n  },\n  { \n    path: 'dashboard', \n    loadChildren: () => import('./features/dashboard/dashboard.module').then(m => m.DashboardModule) \n  },\n  { \n    path: 'members', \n    loadChildren: () => import('./features/members/members.module').then(m => m.MembersModule) \n  },\n  { \n    path: 'society', \n    loadChildren: () => import('./features/society/society.module').then(m => m.SocietyModule) \n  },\n  { path: 'society-users', loadChildren: () => import('./features/society-users/society-users-module').then(m => m.SocietyUsersModule) },\n  { path: '**', redirectTo: '/auth/login' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","size_bytes":998},"src/app/app.component.css":{"content":"/* Component-specific styles can be added here */\n/* Tailwind classes are preferred for styling */\n","size_bytes":99},"src/app/app.component.ts":{"content":"import { Component, OnInit } from '@angular/core';\nimport { ThemeService } from './core/services/theme.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  standalone: false\n})\nexport class AppComponent implements OnInit {\n  title = 'Fintcs Frontend';\n\n  constructor(private themeService: ThemeService) {}\n\n  ngOnInit(): void {\n    // Theme service will initialize automatically\n  }\n}\n","size_bytes":459},"src/app/app.module.ts":{"content":"import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AuthInterceptor } from './core/interceptors/auth.interceptor';\nimport { ErrorInterceptor } from './core/interceptors/error.interceptor';\nimport { NavbarComponent } from './shared/components/navbar/navbar.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    NavbarComponent\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ErrorInterceptor,\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","size_bytes":936},"src/app/core/guards/admin.guard.ts":{"content":"import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(): boolean {\n    if (this.authService.isAuthenticated() && this.authService.isAdmin()) {\n      return true;\n    } else {\n      this.router.navigate(['/dashboard']);\n      return false;\n    }\n  }\n}","size_bytes":541},"src/app/core/guards/auth.guard.ts":{"content":"// src/app/core/guard/auth.guard.ts\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    const token = this.authService.getToken();\n    const userStr = localStorage.getItem('fintcs_user');\n    \n    // If we have both token and user data, allow access\n    if (token && userStr) {\n      // Only validate token expiration for critical operations\n      if (state.url.includes('/users') || state.url.includes('/admin')) {\n        return this.authService.isAuthenticated();\n      }\n      return true;\n    }\n    \n    // No authentication data, redirect to login\n    this.router.navigate(['/auth/login']);\n    return false;\n  }\n}","size_bytes":1031},"src/app/core/interceptors/auth.interceptor.ts":{"content":"import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    const token = this.authService.getToken();\n    \n    if (token) {\n      const authReq = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(authReq);\n    }\n    \n    return next.handle(req);\n  }\n}","size_bytes":625},"src/app/core/interceptors/error.interceptor.ts":{"content":"import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    return next.handle(req).pipe(\n      catchError((error: HttpErrorResponse) => {\n        // Only logout on 401 errors from authentication endpoints\n        if (error.status === 401 && req.url.includes('/auth/')) {\n          this.authService.logout();\n        }\n        \n        return throwError(() => error);\n      })\n    );\n  }\n}","size_bytes":796},"src/app/core/services/auth.service.ts":{"content":"// src/app/core/services/auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { LoginRequest, LoginResponse, User, ApiResponse } from '../../shared/models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private readonly API_URL = 'https://fintcsapi-1.onrender.com/api';\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) {\n    this.loadUserFromStorage();\n  }\n\n  login(credentials: LoginRequest): Observable<ApiResponse<LoginResponse>> {\n    return this.http.post<ApiResponse<LoginResponse>>(`${this.API_URL}/auth/login`, credentials)\n      .pipe(\n        tap(response => {\n          if (response.success && response.data) {\n            this.setSession(response.data);\n          }\n        })\n      );\n  }\n\n  getCurrentUser(): Observable<ApiResponse<User>> {\n    return this.http.get<ApiResponse<User>>(`${this.API_URL}/users/me`)\n      .pipe(\n        tap(response => {\n          if (response.success && response.data) {\n            this.currentUserSubject.next(response.data);\n          }\n        })\n      );\n  }\n\n  logout(): void {\n    localStorage.removeItem('fintcs_token');\n    localStorage.removeItem('fintcs_user');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/auth/login']);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('fintcs_token');\n  }\n\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    if (!token) return false;\n    \n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      // Add buffer time to prevent premature logout\n      const currentTime = Date.now() / 1000;\n      const bufferTime = 60; // 1 minute buffer\n      return payload.exp > (currentTime + bufferTime);\n    } catch {\n      // If token parsing fails, check if user data exists in storage\n      const userStr = localStorage.getItem('fintcs_user');\n      return !!userStr;\n    }\n  }\n\n  isAdmin(): boolean {\n    const user = this.currentUserSubject.value;    \n    return user?.roles === 'admin';\n  }\n\n  private setSession(authResult: LoginResponse): void {\n    localStorage.setItem('fintcs_token', authResult.token);\n    localStorage.setItem('fintcs_user', JSON.stringify(authResult));\n    \n    const user: User = {\n      id: 0, // Will be updated from API\n      username: authResult.username,\n      email: authResult.email,\n      phone: authResult.phone,\n      roles: authResult.roles,\n      details: authResult.details,\n      createdAt: ''\n    };\n    \n    this.currentUserSubject.next(user);\n  }\n\n  private loadUserFromStorage(): void {\n    const token = this.getToken();\n    const userStr = localStorage.getItem('fintcs_user');\n    \n    if (token && userStr) {\n      try {\n        const authResult = JSON.parse(userStr);\n        const user: User = {\n          id: 0,\n          username: authResult.username,\n          email: authResult.email,\n          phone: authResult.phone,\n          roles: authResult.roles,\n          details: authResult.details,\n          createdAt: ''\n        };\n        this.currentUserSubject.next(user);\n        \n        // Only check authentication for expired tokens, not on every load\n        if (!this.isAuthenticated()) {\n          setTimeout(() => this.logout(), 100); // Delay logout to prevent immediate redirect\n        }\n      } catch {\n        this.logout();\n      }\n    }\n  }\n}","size_bytes":3636},"src/app/core/services/society.service.ts":{"content":"// src/app/services/society.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class SocietyService {\n  private baseUrl = 'https://fintcsapi-1.onrender.com/api/society';\n\n  constructor(private http: HttpClient) {}\n\n  getSociety(): Observable<any> {\n    return this.http.get(`${this.baseUrl}`);\n  }\n\n  updateSociety(data: any): Observable<any> {\n    return this.http.put(`${this.baseUrl}`, data);\n  }\n\n  getPendingChanges(): Observable<any> {\n    return this.http.get(`${this.baseUrl}/pending-changes`);\n  }\n\n  approveChanges(): Observable<any> {\n    return this.http.post(`${this.baseUrl}/approve-changes`, {});\n  }\n}\n","size_bytes":752},"src/app/features/auth/auth.module.ts":{"content":"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent }\n];\n\n@NgModule({\n  declarations: [\n    LoginComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ]\n})\nexport class AuthModule { }","size_bytes":569},"src/app/features/dashboard/dashboard.module.ts":{"content":"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { AuthGuard } from '../../core/guards/auth.guard';\n\nconst routes: Routes = [\n  { \n    path: '', \n    component: DashboardComponent,\n    canActivate: [AuthGuard]\n  }\n];\n\n@NgModule({\n  declarations: [\n    DashboardComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes)\n  ]\n})\nexport class DashboardModule { }","size_bytes":554},"src/app/features/members/members.module.ts":{"content":"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from '../../core/guards/auth.guard';\n\nconst routes: Routes = [\n  { \n    path: '', \n    redirectTo: 'list', \n    pathMatch: 'full',\n    canActivate: [AuthGuard]\n  },\n  // Routes will be added as components are created\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes)\n  ]\n})\nexport class MembersModule { }","size_bytes":522},"src/app/features/society/society.module.ts":{"content":"// // /src/app/features/society/society.module.ts --- IGNORE ---\n// import { NgModule } from '@angular/core';\n// import { CommonModule } from '@angular/common';\n// import { ReactiveFormsModule } from '@angular/forms';\n// import { RouterModule, Routes } from '@angular/router';\n// import { AuthGuard } from '../../core/guards/auth.guard';\n// import { SocietyConfigComponent } from './society-config/society-config.component';\n\n// const routes: Routes = [\n//   { path: '', redirectTo: 'config', pathMatch: 'full' },\n//   { \n//     path: 'config', \n//     component: SocietyConfigComponent,\n//     canActivate: [AuthGuard]\n//   }\n// ];\n\n// @NgModule({\n//   declarations: [\n//     SocietyConfigComponent\n//   ],\n//   imports: [\n//     CommonModule,\n//     ReactiveFormsModule,\n//     RouterModule.forChild(routes)\n//   ]\n// })\n// export class SocietyModule { }\n\n\n// src/app/features/society/society.module.ts\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from '../../core/guards/auth.guard';\nimport { SocietyConfigComponent } from './society-config/society-config.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'config', pathMatch: 'full' },\n  { \n    path: 'config', \n    component: SocietyConfigComponent,\n    canActivate: [AuthGuard]\n  }\n];\n\n@NgModule({\n  // ðŸš« remove it from declarations\n  declarations: [],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes),\n    SocietyConfigComponent   // âœ… import standalone here\n  ]\n})\nexport class SocietyModule { }\n","size_bytes":1690},"src/app/features/society-users/society-users-module.ts":{"content":"// import { NgModule } from '@angular/core';\n// import { CommonModule } from '@angular/common';\n// import { ReactiveFormsModule, FormsModule } from '@angular/forms';\n// import { SocietyUsersRoutingModule } from './society-users-routing-module';\n// import { SocietyUsersListComponent } from './society-users-list/society-users-list.component';\n// import { SocietyUserDetailComponent } from './society-user-detail/society-users-details.component';\n\n// @NgModule({\n//   imports: [\n//     CommonModule,\n//     ReactiveFormsModule,\n//     FormsModule,\n//     SocietyUsersRoutingModule,\n//     SocietyUsersListComponent,\n//     SocietyUserDetailComponent\n//   ]\n// })\n// export class SocietyUsersModule {}\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { SocietyUsersRoutingModule } from './society-users-routing-module';\n\n// âœ… Standalone components are imported, not declared\nimport { SocietyUsersListComponent } from './society-users-list/society-users-list.component';\nimport { SocietyUserDetailComponent } from './society-user-detail/society-users-details.component';\nimport { UserFormComponent } from './user-form/user-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    SocietyUsersRoutingModule,\n    SocietyUsersListComponent,   // âœ… imported instead of declared\n    SocietyUserDetailComponent,  // âœ… imported instead of declared\n    UserFormComponent            // âœ… imported instead of declared\n  ]\n})\nexport class SocietyUsersModule {}\n\n","size_bytes":1622},"src/app/features/society-users/society-users-routing-module.ts":{"content":"// import { NgModule } from '@angular/core';\n// import { RouterModule, Routes } from '@angular/router';\n// import { SocietyUsersListComponent } from './society-users-list/society-users-list.component';\n// import { SocietyUserDetailComponent } from './society-user-detail/society-users-details.component';\n// import { AuthGuard } from 'src/app/core/guards/auth.guard';\n// // import { AdminGuard } from 'src/app/core/guards/admin.guard';\n\n// const routes: Routes = [\n//   { path: '', component: SocietyUsersListComponent, canActivate: [AuthGuard] },\n//   { path: ':id', component: SocietyUserDetailComponent, canActivate: [AuthGuard] }\n// ];\n\n// @NgModule({\n//   imports: [RouterModule.forChild(routes)],\n//   exports: [RouterModule]\n// })\n// export class SocietyUsersRoutingModule {}\n\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SocietyUsersListComponent } from './society-users-list/society-users-list.component';\nimport { SocietyUserDetailComponent } from './society-user-detail/society-users-details.component';\nimport { UserFormComponent } from './user-form/user-form.component';\nimport { AuthGuard } from '../../core/guards/auth.guard';\nimport { AdminGuard } from '../../core/guards/admin.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SocietyUsersListComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: 'create',\n    component: UserFormComponent,\n    canActivate: [AuthGuard, AdminGuard]\n  },\n  {\n    path: ':id',\n    component: SocietyUserDetailComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: ':id/edit',\n    component: UserFormComponent,\n    canActivate: [AuthGuard, AdminGuard]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SocietyUsersRoutingModule {}\n","size_bytes":1823},"src/app/features/society-users/society-users.service.ts":{"content":"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ApiResponse, User, RegisterRequest } from '../../shared/models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SocietyUsersService {\n  private readonly BASE_URL = 'https://fintcsapi-1.onrender.com/api';\n\n  constructor(private http: HttpClient) {}\n\n  getAll(): Observable<ApiResponse<User[]>> {\n    return this.http.get<ApiResponse<User[]>>(`${this.BASE_URL}/users`);\n  }\n\n  getById(id: number): Observable<ApiResponse<User>> {\n    return this.http.get<ApiResponse<User>>(`${this.BASE_URL}/users/${id}`);\n  }\n\n  create(user: RegisterRequest): Observable<ApiResponse<User>> {\n    return this.http.post<ApiResponse<User>>(`${this.BASE_URL}/auth/register`, user);\n  }\n\n  update(id: number, user: Partial<RegisterRequest>): Observable<ApiResponse<User>> {\n    return this.http.put<ApiResponse<User>>(`${this.BASE_URL}/auth/update/${id}`, user);\n  }\n\n  delete(id: number): Observable<ApiResponse<any>> {\n    return this.http.delete<ApiResponse<any>>(`${this.BASE_URL}/auth/delete/${id}`);\n  }\n}\n","size_bytes":1145},"src/app/shared/models/member.model.ts":{"content":"export interface Member {\n  id: number;\n  memNo: string;\n  name: string;\n  fhName: string;\n  officeAddress: string;\n  city: string;\n  phoneOffice: string;\n  branch: string;\n  phoneRes: string;\n  mobile: string;\n  designation: string;\n  residenceAddress: string;\n  dob: string;\n  dojSociety: string;\n  email: string;\n  dojOrg: string;\n  dor?: string;\n  nominee: string;\n  nomineeRelation: string;\n  bankingDetails: BankingDetails;\n  isPendingApproval: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface BankingDetails {\n  bankName: string;\n  accountNumber: string;\n  ifscCode: string;\n  branchName: string;\n  accountHolderName: string;\n}\n\nexport interface MemberCreateRequest {\n  name: string;\n  fhName?: string;\n  officeAddress?: string;\n  city?: string;\n  phoneOffice?: string;\n  branch?: string;\n  phoneRes?: string;\n  mobile?: string;\n  designation?: string;\n  residenceAddress?: string;\n  dob: string;\n  dojSociety: string;\n  email?: string;\n  dojOrg: string;\n  dor?: string;\n  nominee?: string;\n  nomineeRelation?: string;\n  bankingDetails?: BankingDetails;\n}\n\nexport interface MemberUpdateRequest {\n  name?: string;\n  fhName?: string;\n  officeAddress?: string;\n  city?: string;\n  phoneOffice?: string;\n  branch?: string;\n  phoneRes?: string;\n  mobile?: string;\n  designation?: string;\n  residenceAddress?: string;\n  dob?: string;\n  dojSociety?: string;\n  email?: string;\n  dojOrg?: string;\n  dor?: string;\n  nominee?: string;\n  nomineeRelation?: string;\n  bankingDetails?: BankingDetails;\n}","size_bytes":1516},"src/app/shared/models/society.model.ts":{"content":"export interface Society {\n  id: number;\n  societyName: string;\n  address: string;\n  city: string;\n  phone: string;\n  fax: string;\n  email: string;\n  website: string;\n  registrationNumber: string;\n  tabs: SocietyTabs;\n  isPendingApproval: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface SocietyTabs {\n  Interest: InterestRates;\n  Limit: Limits;\n}\n\nexport interface InterestRates {\n  Dividend: number;\n  OD: number;\n  CD: number;\n  Loan: number;\n  EmergencyLoan: number;\n  LAS: number;\n}\n\nexport interface Limits {\n  Share: number;\n  Loan: number;\n  EmergencyLoan: number;\n}\n\nexport interface SocietyUpdateRequest {\n  societyName: string;\n  address: string;\n  city: string;\n  phone: string;\n  fax: string;\n  email: string;\n  website: string;\n  registrationNumber: string;\n  tabs: SocietyTabs;\n}","size_bytes":816},"src/app/shared/models/user.model.ts":{"content":"export interface User {\n  id: number;\n  username: string;\n  email: string;\n  phone: string;\n  roles: string;\n  details: UserDetails;\n  createdAt: string;\n}\n\nexport interface UserDetails {\n  EDPNo: string;\n  Name: string;\n  AddressOffice: string;\n  AddressResidential: string;\n  Designation: string;\n  PhoneOffice: string;\n  PhoneResidential: string;\n  Mobile: string;\n  Email: string;\n}\n\nexport interface LoginRequest {\n  username: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  token: string;\n  username: string;\n  email: string;\n  phone: string;\n  roles: string;\n  details: UserDetails;\n  expiresAt: string;\n}\n\nexport interface RegisterRequest {\n  username: string;\n  password: string;\n  email: string;\n  phone?: string;\n  EDPNo?: string;\n  Name?: string;\n  AddressOffice?: string;\n  AddressResidential?: string;\n  Designation?: string;\n  PhoneOffice?: string;\n  PhoneResidential?: string;\n  Mobile?: string;\n}\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  message: string;\n  data: T;\n  errors: string[];\n}","size_bytes":1038},"src/app/features/auth/login/login.component.css":{"content":"/* Component-specific styles can be added here */\n/* Tailwind classes are preferred for styling */","size_bytes":98},"src/app/features/auth/login/login.component.ts":{"content":"import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../../core/services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n  standalone: false\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n  isLoading = false;\n  errorMessage = '';\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.valid) {\n      this.isLoading = true;\n      this.errorMessage = '';\n\n      this.authService.login(this.loginForm.value).subscribe({\n        next: (response) => {\n          if (response.success) {\n            this.router.navigate(['/dashboard']);\n          } else {\n            this.errorMessage = response.message || 'Login failed';\n          }\n          this.isLoading = false;\n        },\n        error: (error) => {\n          this.errorMessage = error.error?.message || 'Login failed';\n          this.isLoading = false;\n        }\n      });\n    }\n  }\n}","size_bytes":1312},"src/app/features/dashboard/dashboard/dashboard.component.css":{"content":"/* Component-specific styles can be added here */\n/* Tailwind classes are preferred for styling */","size_bytes":98},"src/app/features/dashboard/dashboard/dashboard.component.ts":{"content":"// src/app/features/dashboard/dashboard/dashboard.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../../core/services/auth.service';\nimport { User } from '../../../shared/models/user.model';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css'],\n  standalone: false\n})\nexport class DashboardComponent implements OnInit {\n  currentUser: User | null = null;\n  \n  // Dashboard statistics\n  stats = {\n    totalMembers: { value: 1234, growth: 12 },\n    totalDeposits: { value: 45.2, growth: 8.5 },\n    activeLoans: { value: 156, growth: 2.3 },\n    interestEarned: { value: 2.1, growth: 15.2 }\n  };\n\n  quickActions = [\n    {\n      title: 'New Member',\n      subtitle: 'Register new member',\n      icon: 'ðŸ‘¤',\n      route: '/members/new',\n      color: 'bg-purple-600'\n    },\n    {\n      title: 'New Deposit',\n      subtitle: 'View/deposit receipt',\n      icon: 'ðŸ’°',\n      route: '/deposits/new',\n      color: 'bg-blue-600'\n    },\n    {\n      title: 'Process Loan',\n      subtitle: 'Application processing',\n      icon: 'ðŸ“„',\n      route: '/loans/process',\n      color: 'bg-green-600'\n    }\n  ];\n\n  constructor(private authService: AuthService) {}\n\n  ngOnInit(): void {\n    this.authService.currentUser$.subscribe(user => {\n      this.currentUser = user;\n    });\n  }\n\n  isAdmin(): boolean {\n    return this.authService.isAdmin();\n  }\n\n  logout(): void {\n    this.authService.logout();\n  }\n}","size_bytes":1514},"src/app/features/society/society-config/society-config.component.css":{"content":"/* Component-specific styles can be added here */\n/* Tailwind classes are preferred for styling */","size_bytes":98},"src/app/features/society/society-config/society-config.component.ts":{"content":"// src/app/features/society/society-config/society-config.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from '../../../core/services/auth.service';\nimport { SocietyService } from '../../../core/services/society.service';\n\n@Component({\n  selector: 'app-society-config',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule\n  ],\n  templateUrl: './society-config.component.html',\n  styleUrls: ['./society-config.component.css']\n})\n\n\nexport class SocietyConfigComponent implements OnInit {\n  societyForm: FormGroup;\n  isLoading = false;\n  activeTab = 'basic';\n  societyId: number | null = null;\n  pendingChanges: any = null;\n  isEditMode = false; // edit mode flag\n  isAdminUser = false;\n\n  toggleEditMode() {\n    console.log('Before:', this.isEditMode);\n    this.isEditMode = !this.isEditMode;\n    console.log('After:', this.isEditMode);\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private societyService: SocietyService\n  ) {\n    this.societyForm = this.fb.group({\n      societyName: ['', Validators.required],\n      registrationNumber: ['', Validators.required],\n      address: ['', Validators.required],\n      city: ['', Validators.required],\n      phone: ['', Validators.required],\n      fax: [''],\n      email: ['', [Validators.email]],\n      website: [''],\n\n      // Interest\n      dividendRate: [0, [Validators.required, Validators.min(0)]],\n      odRate: [0, [Validators.required, Validators.min(0)]],\n      cdRate: [0, [Validators.required, Validators.min(0)]],\n      loanRate: [0, [Validators.required, Validators.min(0)]],\n      emergencyLoanRate: [0, [Validators.required, Validators.min(0)]],\n      lasRate: [0, [Validators.required, Validators.min(0)]],\n\n      // Limits\n      shareLimit: [0, [Validators.required, Validators.min(0)]],\n      loanLimit: [0, [Validators.required, Validators.min(0)]],\n      emergencyLoanLimit: [0, [Validators.required, Validators.min(0)]],\n    });\n  }\n\n  ngOnInit(): void {\n    this.isAdminUser = this.authService.isAdmin(); // assign once\n    console.log('Is Admin User:', this.isAdminUser);\n    \n    this.loadSocietyData();\n    this.checkPendingChanges();\n  }\n\n  loadSocietyData(): void {\n    this.societyService.getSociety().subscribe(res => {\n      if (res.success && res.data) {\n        console.log(res.data);\n        this.societyId = res.data.id;\n\n        let tabs: any = {};\n        try {\n          tabs = res.data.tabs ? JSON.parse(res.data.tabs) : {};\n        } catch (e) {\n          console.error(\"Invalid tabs JSON\", e);\n        }\n\n        this.societyForm.patchValue({\n          societyName: res.data.societyName,\n          registrationNumber: res.data.registrationNumber,\n          address: res.data.address,\n          city: res.data.city,\n          phone: res.data.phone,\n          fax: res.data.fax,\n          email: res.data.email,\n          website: res.data.website,\n\n          // âœ… use lowercase keys from API\n          dividendRate: tabs.interest?.dividend ?? 0,\n          odRate: tabs.interest?.od ?? 0,\n          cdRate: tabs.interest?.cd ?? 0,\n          loanRate: tabs.interest?.loan ?? 0,\n          emergencyLoanRate: tabs.interest?.emergencyLoan ?? 0,\n          lasRate: tabs.interest?.las ?? 0,\n\n          shareLimit: tabs.limit?.share ?? 0,\n          loanLimit: tabs.limit?.loan ?? 0,\n          emergencyLoanLimit: tabs.limit?.emergencyLoan ?? 0\n        });\n      }\n    });\n  }\n\n\n  checkPendingChanges(): void {\n    this.societyService.getPendingChanges().subscribe(res => {\n      if (res.success && res.data?.hasPendingChanges) {\n        this.pendingChanges = JSON.parse(res.data.pendingChanges);\n      }\n    });\n  }\n\n  setActiveTab(tab: string): void {\n    this.activeTab = tab;\n  }\n\n  onSubmit(): void {\n    // only admin can submit configs\n    if (!this.isAdmin()) return;\n\n    if (this.societyForm.valid) {\n      this.isLoading = true;\n      const values = this.societyForm.value;\n\n      const payload = {\n        societyName: values.societyName,\n        registrationNumber: values.registrationNumber,\n        address: values.address,\n        city: values.city,\n        phone: values.phone,\n        fax: values.fax,\n        email: values.email,\n        website: values.website,\n        tabs: {\n          interest: {\n            dividend: values.dividendRate,\n            od: values.odRate,\n            cd: values.cdRate,\n            loan: values.loanRate,\n            emergencyLoan: values.emergencyLoanRate,\n            las: values.lasRate,\n          },\n          limit: {\n            share: values.shareLimit,\n            loan: values.loanLimit,\n            emergencyLoan: values.emergencyLoanLimit,\n          }\n        }\n      };\n\n      this.societyService.updateSociety(payload).subscribe({\n        next: (res) => {\n          this.isLoading = false;\n          alert(res.message || 'Changes submitted for approval!');\n          this.checkPendingChanges();\n        },\n        error: () => {\n          this.isLoading = false;\n          alert('Error while updating society');\n        }\n      });\n    }\n  }\n\n  approveChanges(): void {\n    // approval should be by normal users only\n    if (this.isAdmin()) return;\n\n    this.societyService.approveChanges().subscribe({\n      next: (res) => {\n        alert(res.message || 'Changes approved successfully!');\n        this.pendingChanges = null;\n        this.loadSocietyData();\n      },\n      error: () => alert('Error approving changes')\n    });\n  }\n\n  isAdmin(): boolean {\n    console.log(this.authService.isAdmin());\n    \n    return this.authService.isAdmin();\n  }\n\n  logout(): void {\n    this.authService.logout();\n  }\n}\n\n\n\n// import { Component, OnInit } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\n// import { CommonModule } from '@angular/common';\n// import { RouterModule } from '@angular/router';\n// import { AuthService } from '../../../core/services/auth.service';\n// import { SocietyService } from '../../../core/services/society.service';\n\n// @Component({\n//   selector: 'app-society-config',\n//   standalone: true,\n//   imports: [\n//     CommonModule,\n//     ReactiveFormsModule,\n//     RouterModule\n//   ],\n//   templateUrl: './society-config.component.html',\n//   styleUrls: ['./society-config.component.css']\n// })\n// export class SocietyConfigComponent implements OnInit {\n//   societyForm: FormGroup;\n//   isLoading = false;\n//   activeTab = 'basic';\n//   societyId: number | null = null;\n//   pendingChanges: any = null;\n//   isEditMode = false; // ðŸ”¹ edit mode flag\n//   originalData: any = null; // ðŸ”¹ store original values to restore on cancel\n\n//   constructor(\n//     private fb: FormBuilder,\n//     private authService: AuthService,\n//     private societyService: SocietyService\n//   ) {\n//     this.societyForm = this.fb.group({\n//       societyName: [{ value: '', disabled: true }, Validators.required],\n//       registrationNumber: [{ value: '', disabled: true }, Validators.required],\n//       address: [{ value: '', disabled: true }, Validators.required],\n//       city: [{ value: '', disabled: true }, Validators.required],\n//       phone: [{ value: '', disabled: true }, Validators.required],\n//       fax: [{ value: '', disabled: true }],\n//       email: [{ value: '', disabled: true }, [Validators.email]],\n//       website: [{ value: '', disabled: true }],\n\n//       dividendRate: [{ value: 0, disabled: true }, [Validators.required, Validators.min(0)]],\n//       odRate: [{ value: 0, disabled: true }, [Validators.required, Validators.min(0)]],\n//       cdRate: [{ value: 0, disabled: true }, [Validators.required, Validators.min(0)]],\n//       loanRate: [{ value: 0, disabled: true }, [Validators.required, Validators.min(0)]],\n//       emergencyLoanRate: [{ value: 0, disabled: true }, [Validators.required, Validators.min(0)]],\n//       lasRate: [{ value: 0, disabled: true }, [Validators.required, Validators.min(0)]],\n\n//       shareLimit: [{ value: 0, disabled: true }, [Validators.required, Validators.min(0)]],\n//       loanLimit: [{ value: 0, disabled: true }, [Validators.required, Validators.min(0)]],\n//       emergencyLoanLimit: [{ value: 0, disabled: true }, [Validators.required, Validators.min(0)]],\n//     });\n//   }\n\n//   ngOnInit(): void {\n//     this.loadSocietyData();\n//     this.checkPendingChanges();\n//   }\n  \n//   loadSocietyData(): void {\n//     this.societyService.getSociety().subscribe(res => {\n//       if (res.success && res.data) {\n//         console.log(res.data);\n//         this.societyId = res.data.id;\n\n//         let tabs: any = {};\n//         try {\n//           tabs = res.data.tabs ? JSON.parse(res.data.tabs) : {};\n//         } catch (e) {\n//           console.error(\"Invalid tabs JSON\", e);\n//         }\n\n//         const formData = {\n//           societyName: res.data.societyName,\n//           registrationNumber: res.data.registrationNumber,\n//           address: res.data.address,\n//           city: res.data.city,\n//           phone: res.data.phone,\n//           fax: res.data.fax,\n//           email: res.data.email,\n//           website: res.data.website,\n\n//           dividendRate: tabs.interest?.dividend ?? 0,\n//           odRate: tabs.interest?.od ?? 0,\n//           cdRate: tabs.interest?.cd ?? 0,\n//           loanRate: tabs.interest?.loan ?? 0,\n//           emergencyLoanRate: tabs.interest?.emergencyLoan ?? 0,\n//           lasRate: tabs.interest?.las ?? 0,\n\n//           shareLimit: tabs.limit?.share ?? 0,\n//           loanLimit: tabs.limit?.loan ?? 0,\n//           emergencyLoanLimit: tabs.limit?.emergencyLoan ?? 0\n//         };\n\n//         this.societyForm.patchValue(formData);\n//         this.originalData = formData; // ðŸ”¹ store original for cancel\n//       }\n//     });\n//   }\n\n//   checkPendingChanges(): void {\n//     this.societyService.getPendingChanges().subscribe(res => {\n//       if (res.success && res.data?.hasPendingChanges) {\n//         this.pendingChanges = JSON.parse(res.data.pendingChanges);\n//       }\n//     });\n//   }\n\n//   setActiveTab(tab: string): void {\n//     this.activeTab = tab;\n//   }\n\n//   toggleEditMode(): void {\n//     if (!this.isAdmin()) return;\n\n//     this.isEditMode = !this.isEditMode;\n\n//     if (this.isEditMode) {\n//       this.societyForm.enable();\n//     } else {\n//       this.societyForm.disable();\n//       this.societyForm.patchValue(this.originalData); // restore original values\n//     }\n//   }\n\n//   onSubmit(): void {\n//     if (!this.isAdmin()) return;\n\n//     if (this.societyForm.valid) {\n//       this.isLoading = true;\n//       const values = this.societyForm.value;\n\n//       const payload = {\n//         societyName: values.societyName,\n//         registrationNumber: values.registrationNumber,\n//         address: values.address,\n//         city: values.city,\n//         phone: values.phone,\n//         fax: values.fax,\n//         email: values.email,\n//         website: values.website,\n//         tabs: {\n//           interest: {\n//             dividend: values.dividendRate,\n//             od: values.odRate,\n//             cd: values.cdRate,\n//             loan: values.loanRate,\n//             emergencyLoan: values.emergencyLoanRate,\n//             las: values.lasRate,\n//           },\n//           limit: {\n//             share: values.shareLimit,\n//             loan: values.loanLimit,\n//             emergencyLoan: values.emergencyLoanLimit,\n//           }\n//         }\n//       };\n\n//       this.societyService.updateSociety(payload).subscribe({\n//         next: (res) => {\n//           this.isLoading = false;\n//           alert(res.message || 'Changes submitted for approval!');\n//           this.checkPendingChanges();\n//           this.isEditMode = false;\n//           this.societyForm.disable();\n//           this.originalData = values; // update original values\n//         },\n//         error: () => {\n//           this.isLoading = false;\n//           alert('Error while updating society');\n//         }\n//       });\n//     }\n//   }\n\n//   approveChanges(): void {\n//     if (this.isAdmin()) return;\n\n//     this.societyService.approveChanges().subscribe({\n//       next: (res) => {\n//         alert(res.message || 'Changes approved successfully!');\n//         this.pendingChanges = null;\n//         this.loadSocietyData();\n//       },\n//       error: () => alert('Error approving changes')\n//     });\n//   }\n\n//   isAdmin(): boolean {\n//     return this.authService.isAdmin();\n//   }\n\n//   logout(): void {\n//     this.authService.logout();\n//   }\n// }\n","size_bytes":12746},"src/app/features/society-users/society-user-detail/society-users-details.component.ts":{"content":"// import { Component, OnInit } from '@angular/core';\n// import { ActivatedRoute, Router } from '@angular/router';\n// import { SocietyUsersService } from '../society-users.service';\n// import { User } from '../../../shared/models/user.model';\n// import { AuthService } from '../../../core/services/auth.service';\n\n// @Component({\n//   selector: 'app-society-user-detail',\n//   templateUrl: './society-users-details.component.html'\n// })\n// export class SocietyUserDetailComponent implements OnInit {\n//   user!: User;\n//   isAdmin = false;\n\n//   constructor(\n//     private route: ActivatedRoute,\n//     private router: Router,\n//     private societyUsersService: SocietyUsersService,\n//     private authService: AuthService\n//   ) {}\n\n//   ngOnInit(): void {\n//     this.isAdmin = this.authService.isAdmin();\n//     const id = this.route.snapshot.paramMap.get('id');\n//     if (id) {\n//       this.societyUsersService.getById(+id).subscribe(res => {\n//         if (res.success) {\n//           this.user = res.data;\n//         }\n//       });\n//     }\n//   }\n\n//   deleteUser(): void {\n//     if (confirm('Are you sure you want to delete this user?')) {\n//       this.societyUsersService.delete(this.user.id).subscribe(() => {\n//         this.router.navigate(['/society-users']);\n//       });\n//     }\n//   }\n\n//   editUser(): void {\n//     this.router.navigate(['/society-users', this.user.id, 'edit']);\n//   }\n// }\n\n\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SocietyUsersService } from '../society-users.service';\nimport { User } from '../../../shared/models/user.model';\nimport { AuthService } from '../../../core/services/auth.service';\n\n@Component({\n  selector: 'app-society-user-detail',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './society-users-details.component.html'\n})\nexport class SocietyUserDetailComponent implements OnInit {\n  user: User | null = null;\n  isAdmin = false;\n  isLoading = false;\n  currentUsername = '';\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private societyUsersService: SocietyUsersService,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.isAdmin = this.authService.isAdmin();\n    this.getCurrentUsername();\n    const id = this.route.snapshot.paramMap.get('id');\n    if (id) {\n      this.loadUser(+id);\n    }\n  }\n\n  getCurrentUsername(): void {\n    this.authService.currentUser$.subscribe(user => {\n      this.currentUsername = user?.username || '';\n    });\n  }\n\n  loadUser(id: number): void {\n    this.isLoading = true;\n    this.societyUsersService.getById(id).subscribe({\n      next: (res) => {\n        if (res.success) {\n          this.user = res.data;\n        }\n        this.isLoading = false;\n      },\n      error: (error) => {\n        console.error('Error loading user:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n\n  deleteUser(): void {\n    if (!this.user) return;\n    if (confirm(`Are you sure you want to delete user \"${this.user.username}\"? This action cannot be undone.`)) {\n      this.societyUsersService.delete(this.user.id).subscribe({\n        next: (res) => {\n          if (res.success) {\n            this.router.navigate(['/society-users']);\n          } else {\n            alert('Failed to delete user: ' + res.message);\n          }\n        },\n        error: (error) => {\n          console.error('Error deleting user:', error);\n          alert('Failed to delete user. Please try again.');\n        }\n      });\n    }\n  }\n\n  editUser(): void {\n    if (!this.user) return;\n    this.router.navigate(['/society-users', this.user.id, 'edit']);\n  }\n\n  goBack(): void {\n    this.router.navigate(['/society-users']);\n  }\n}\n","size_bytes":3791},"src/app/features/society-users/society-users-list/society-users-list.component.ts":{"content":"// import { Component, OnInit } from '@angular/core';\n// import { SocietyUsersService } from '../society-users.service';\n// import { User } from '../../../shared/models/user.model';\n// import { AuthService } from '../../../core/services/auth.service';\n// import { Router } from '@angular/router';\n\n// @Component({\n//   selector: 'app-society-users-list',\n//   templateUrl: './society-users-list.component.html'\n// })\n// export class SocietyUsersListComponent implements OnInit {\n//   users: User[] = [];\n//   filteredUsers: User[] = [];\n//   searchTerm: string = '';\n//   isAdmin: boolean = false;\n\n//   constructor(\n//     private societyUsersService: SocietyUsersService,\n//     private authService: AuthService,\n//     private router: Router\n//   ) {}\n\n//   ngOnInit(): void {\n//     this.isAdmin = this.authService.isAdmin();\n//     this.loadUsers();\n//   }\n\n//   loadUsers(): void {\n//     this.societyUsersService.getAll().subscribe(res => {\n//       if (res.success) {\n//         this.users = res.data;\n//         this.filteredUsers = res.data;\n//       }\n//     });\n//   }\n\n//   searchUsers(): void {\n//     this.filteredUsers = this.users.filter(u =>\n//       u.username.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\n//       u.email.toLowerCase().includes(this.searchTerm.toLowerCase())\n//     );\n//   }\n\n//   openUser(user: User): void {\n//     this.router.navigate(['/society-users', user.id]);\n//   }\n// }\n\n\nimport { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { SocietyUsersService } from '../society-users.service';\nimport { User } from '../../../shared/models/user.model';\nimport { AuthService } from '../../../core/services/auth.service';\n\n@Component({\n  selector: 'app-society-users-list',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './society-users-list.component.html'\n})\nexport class SocietyUsersListComponent implements OnInit {\n  users: User[] = [];\n  filteredUsers: User[] = [];\n  searchTerm: string = '';\n  roleFilter: string = '';\n  isAdmin = false;\n  isLoading = false;\n  currentUsername = '';\n\n  constructor(\n    private societyUsersService: SocietyUsersService,\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.isAdmin = this.authService.isAdmin();\n    this.getCurrentUsername();\n    this.loadUsers();\n  }\n\n  getCurrentUsername(): void {\n    this.authService.currentUser$.subscribe(user => {\n      this.currentUsername = user?.username || '';\n    });\n  }\n\n  loadUsers(): void {\n    this.isLoading = true;\n    this.societyUsersService.getAll().subscribe({\n      next: (res) => {\n        if (res.success) {\n          this.users = res.data;\n          this.applyFilters();\n        }\n        this.isLoading = false;\n      },\n      error: (error) => {\n        console.error('Error loading users:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n\n  searchUsers(): void {\n    this.applyFilters();\n  }\n\n  applyFilters(): void {\n    let filtered = this.users;\n\n    // Apply search filter\n    if (this.searchTerm) {\n      const searchLower = this.searchTerm.toLowerCase();\n      filtered = filtered.filter(u =>\n        u.username.toLowerCase().includes(searchLower) ||\n        u.email.toLowerCase().includes(searchLower) ||\n        (u.details?.Name && u.details.Name.toLowerCase().includes(searchLower))\n      );\n    }\n\n    // Apply role filter\n    if (this.roleFilter) {\n      filtered = filtered.filter(u => u.roles === this.roleFilter);\n    }\n\n    this.filteredUsers = filtered;\n  }\n\n  viewUser(user: User): void {\n    this.router.navigate(['/society-users', user.id]);\n  }\n\n  editUser(user: User): void {\n    this.router.navigate(['/society-users', user.id, 'edit']);\n  }\n\n  createUser(): void {\n    this.router.navigate(['/society-users', 'create']);\n  }\n\n  deleteUser(user: User): void {\n    if (confirm(`Are you sure you want to delete user \"${user.username}\"? This action cannot be undone.`)) {\n      this.societyUsersService.delete(user.id).subscribe({\n        next: (res) => {\n          if (res.success) {\n            this.loadUsers(); // Reload the users list\n          } else {\n            alert('Failed to delete user: ' + res.message);\n          }\n        },\n        error: (error) => {\n          console.error('Error deleting user:', error);\n          alert('Failed to delete user. Please try again.');\n        }\n      });\n    }\n  }\n}\n","size_bytes":4519},"src/app/core/services/theme.service.ts":{"content":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n  private isDarkModeSubject = new BehaviorSubject<boolean>(false);\n  public isDarkMode$ = this.isDarkModeSubject.asObservable();\n\n  constructor() {\n    this.initializeTheme();\n  }\n\n  private initializeTheme(): void {\n    // Check for saved theme preference or default to light mode\n    const savedTheme = localStorage.getItem('theme');\n    const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    \n    if (savedTheme) {\n      this.setDarkMode(savedTheme === 'dark');\n    } else if (prefersDark) {\n      this.setDarkMode(true);\n    }\n  }\n\n  toggleTheme(): void {\n    const isDark = !this.isDarkModeSubject.value;\n    this.setDarkMode(isDark);\n  }\n\n  setDarkMode(isDark: boolean): void {\n    this.isDarkModeSubject.next(isDark);\n    \n    if (isDark) {\n      document.documentElement.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n    }\n  }\n\n  isDarkMode(): boolean {\n    return this.isDarkModeSubject.value;\n  }\n}","size_bytes":1246},"src/app/features/society-users/user-form/user-form.component.ts":{"content":"import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SocietyUsersService } from '../society-users.service';\nimport { User, RegisterRequest } from '../../../shared/models/user.model';\nimport { AuthService } from '../../../core/services/auth.service';\n\n@Component({\n  selector: 'app-user-form',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './user-form.component.html'\n})\nexport class UserFormComponent implements OnInit {\n  userForm: FormGroup;\n  isEditMode = false;\n  isLoading = false;\n  isSaving = false;\n  userId: number | null = null;\n  user: User | null = null;\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private societyUsersService: SocietyUsersService,\n    private authService: AuthService\n  ) {\n    this.userForm = this.createForm();\n  }\n\n  ngOnInit(): void {\n    // Check if user is admin\n    if (!this.authService.isAdmin()) {\n      this.router.navigate(['/society-users']);\n      return;\n    }\n\n    const id = this.route.snapshot.paramMap.get('id');\n    if (id && id !== 'create') {\n      this.isEditMode = true;\n      this.userId = +id;\n      this.loadUser();\n    }\n  }\n\n  createForm(): FormGroup {\n    return this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(3)]],\n      password: ['', this.isEditMode ? [] : [Validators.required, Validators.minLength(6)]],\n      email: ['', [Validators.required, Validators.email]],\n      phone: [''],\n      EDPNo: [''],\n      Name: [''],\n      AddressOffice: [''],\n      AddressResidential: [''],\n      Designation: [''],\n      PhoneOffice: [''],\n      PhoneResidential: [''],\n      Mobile: ['']\n    });\n  }\n\n  loadUser(): void {\n    if (!this.userId) return;\n    \n    this.isLoading = true;\n    this.societyUsersService.getById(this.userId).subscribe({\n      next: (res) => {\n        if (res.success) {\n          this.user = res.data;\n          this.populateForm();\n        }\n        this.isLoading = false;\n      },\n      error: (error) => {\n        console.error('Error loading user:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n\n  populateForm(): void {\n    if (!this.user) return;\n\n    this.userForm.patchValue({\n      username: this.user.username,\n      email: this.user.email,\n      phone: this.user.phone,\n      EDPNo: this.user.details?.EDPNo || '',\n      Name: this.user.details?.Name || '',\n      AddressOffice: this.user.details?.AddressOffice || '',\n      AddressResidential: this.user.details?.AddressResidential || '',\n      Designation: this.user.details?.Designation || '',\n      PhoneOffice: this.user.details?.PhoneOffice || '',\n      PhoneResidential: this.user.details?.PhoneResidential || '',\n      Mobile: this.user.details?.Mobile || ''\n    });\n\n    // Disable username and EDPNo in edit mode as per requirements\n    if (this.isEditMode) {\n      this.userForm.get('username')?.disable();\n      this.userForm.get('EDPNo')?.disable();\n    }\n  }\n\n  onSubmit(): void {\n    if (this.userForm.valid) {\n      this.isSaving = true;\n      const formData = this.userForm.getRawValue() as RegisterRequest;\n\n      const operation = this.isEditMode && this.userId\n        ? this.societyUsersService.update(this.userId, formData)\n        : this.societyUsersService.create(formData);\n\n      operation.subscribe({\n        next: (res) => {\n          if (res.success) {\n            this.router.navigate(['/society-users']);\n          } else {\n            alert('Failed to save user: ' + res.message);\n          }\n          this.isSaving = false;\n        },\n        error: (error) => {\n          console.error('Error saving user:', error);\n          alert('Failed to save user. Please try again.');\n          this.isSaving = false;\n        }\n      });\n    }\n  }\n\n  cancel(): void {\n    this.router.navigate(['/society-users']);\n  }\n\n  getFieldError(fieldName: string): string {\n    const field = this.userForm.get(fieldName);\n    if (field && field.errors && field.touched) {\n      if (field.errors['required']) return `${fieldName} is required`;\n      if (field.errors['email']) return 'Please enter a valid email';\n      if (field.errors['minlength']) return `${fieldName} must be at least ${field.errors['minlength'].requiredLength} characters`;\n    }\n    return '';\n  }\n}","size_bytes":4486},"src/app/shared/components/navbar/navbar.component.ts":{"content":"import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterModule } from '@angular/router';\nimport { AuthService } from '../../../core/services/auth.service';\nimport { ThemeService } from '../../../core/services/theme.service';\nimport { User } from '../../models/user.model';\n\n@Component({\n  selector: 'app-navbar',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  templateUrl: './navbar.component.html'\n})\nexport class NavbarComponent implements OnInit {\n  currentUser: User | null = null;\n  isDarkMode = false;\n\n  constructor(\n    private authService: AuthService,\n    private themeService: ThemeService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.authService.currentUser$.subscribe(user => {\n      this.currentUser = user;\n    });\n\n    this.themeService.isDarkMode$.subscribe(isDark => {\n      this.isDarkMode = isDark;\n    });\n  }\n\n  toggleTheme(): void {\n    this.themeService.toggleTheme();\n  }\n\n  logout(): void {\n    this.authService.logout();\n  }\n\n  isAdmin(): boolean {\n    return this.authService.isAdmin();\n  }\n}","size_bytes":1123}},"version":1}